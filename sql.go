// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OFF = 57410
const OR = 57411
const AND = 57412
const NOT = 57413
const BETWEEN = 57414
const CASE = 57415
const WHEN = 57416
const THEN = 57417
const ELSE = 57418
const END = 57419
const LE = 57420
const GE = 57421
const NE = 57422
const NULL_SAFE_EQUAL = 57423
const IS = 57424
const LIKE = 57425
const REGEXP = 57426
const IN = 57427
const SHIFT_LEFT = 57428
const SHIFT_RIGHT = 57429
const DIV = 57430
const MOD = 57431
const UNARY = 57432
const COLLATE = 57433
const BINARY = 57434
const UNDERSCORE_BINARY = 57435
const UNDERSCORE_UTF8MB4 = 57436
const INTERVAL = 57437
const JSON_EXTRACT_OP = 57438
const JSON_UNQUOTE_EXTRACT_OP = 57439
const CREATE = 57440
const ALTER = 57441
const DROP = 57442
const RENAME = 57443
const ANALYZE = 57444
const ADD = 57445
const FLUSH = 57446
const SCHEMA = 57447
const TABLE = 57448
const INDEX = 57449
const VIEW = 57450
const TO = 57451
const IGNORE = 57452
const IF = 57453
const UNIQUE = 57454
const PRIMARY = 57455
const COLUMN = 57456
const SPATIAL = 57457
const FULLTEXT = 57458
const KEY_BLOCK_SIZE = 57459
const CHECK = 57460
const ACTION = 57461
const CASCADE = 57462
const CONSTRAINT = 57463
const FOREIGN = 57464
const NO = 57465
const REFERENCES = 57466
const RESTRICT = 57467
const SHOW = 57468
const DESCRIBE = 57469
const EXPLAIN = 57470
const DATE = 57471
const ESCAPE = 57472
const REPAIR = 57473
const OPTIMIZE = 57474
const TRUNCATE = 57475
const MAXVALUE = 57476
const PARTITION = 57477
const REORGANIZE = 57478
const LESS = 57479
const THAN = 57480
const PROCEDURE = 57481
const TRIGGER = 57482
const VINDEX = 57483
const VINDEXES = 57484
const STATUS = 57485
const VARIABLES = 57486
const WARNINGS = 57487
const SEQUENCE = 57488
const BEGIN = 57489
const START = 57490
const TRANSACTION = 57491
const COMMIT = 57492
const ROLLBACK = 57493
const BIT = 57494
const TINYINT = 57495
const SMALLINT = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const BIGINT = 57500
const INTNUM = 57501
const REAL = 57502
const DOUBLE = 57503
const FLOAT_TYPE = 57504
const DECIMAL = 57505
const NUMERIC = 57506
const TIME = 57507
const TIMESTAMP = 57508
const DATETIME = 57509
const YEAR = 57510
const CHAR = 57511
const VARCHAR = 57512
const BOOL = 57513
const CHARACTER = 57514
const VARBINARY = 57515
const NCHAR = 57516
const TEXT = 57517
const TINYTEXT = 57518
const MEDIUMTEXT = 57519
const LONGTEXT = 57520
const BLOB = 57521
const TINYBLOB = 57522
const MEDIUMBLOB = 57523
const LONGBLOB = 57524
const JSON = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const NULLX = 57535
const AUTO_INCREMENT = 57536
const APPROXNUM = 57537
const SIGNED = 57538
const UNSIGNED = 57539
const ZEROFILL = 57540
const COLLATION = 57541
const DATABASES = 57542
const TABLES = 57543
const VITESS_METADATA = 57544
const VSCHEMA = 57545
const FULL = 57546
const PROCESSLIST = 57547
const COLUMNS = 57548
const FIELDS = 57549
const ENGINES = 57550
const PLUGINS = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const TIMESTAMPADD = 57581
const TIMESTAMPDIFF = 57582
const MATCH = 57583
const AGAINST = 57584
const BOOLEAN = 57585
const LANGUAGE = 57586
const WITH = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590
const ARRAY = 57591
const CUME_DIST = 57592
const DESCRIPTION = 57593
const DENSE_RANK = 57594
const EMPTY = 57595
const EXCEPT = 57596
const FIRST_VALUE = 57597
const GROUPING = 57598
const GROUPS = 57599
const JSON_TABLE = 57600
const LAG = 57601
const LAST_VALUE = 57602
const LATERAL = 57603
const LEAD = 57604
const MEMBER = 57605
const NTH_VALUE = 57606
const NTILE = 57607
const OF = 57608
const OVER = 57609
const PERCENT_RANK = 57610
const RANK = 57611
const RECURSIVE = 57612
const ROW_NUMBER = 57613
const SYSTEM = 57614
const WINDOW = 57615
const ACTIVE = 57616
const ADMIN = 57617
const BUCKETS = 57618
const CLONE = 57619
const COMPONENT = 57620
const DEFINITION = 57621
const ENFORCED = 57622
const EXCLUDE = 57623
const FOLLOWING = 57624
const GEOMCOLLECTION = 57625
const GET_MASTER_PUBLIC_KEY = 57626
const HISTOGRAM = 57627
const HISTORY = 57628
const INACTIVE = 57629
const INVISIBLE = 57630
const LOCKED = 57631
const MASTER_COMPRESSION_ALGORITHMS = 57632
const MASTER_PUBLIC_KEY_PATH = 57633
const MASTER_TLS_CIPHERSUITES = 57634
const MASTER_ZSTD_COMPRESSION_LEVEL = 57635
const NESTED = 57636
const NETWORK_NAMESPACE = 57637
const NOWAIT = 57638
const NULLS = 57639
const OJ = 57640
const OLD = 57641
const OPTIONAL = 57642
const ORDINALITY = 57643
const ORGANIZATION = 57644
const OTHERS = 57645
const PATH = 57646
const PERSIST = 57647
const PERSIST_ONLY = 57648
const PRECEDING = 57649
const PRIVILEGE_CHECKS_USER = 57650
const PROCESS = 57651
const RANDOM = 57652
const REFERENCE = 57653
const REQUIRE_ROW_FORMAT = 57654
const RESOURCE = 57655
const RESPECT = 57656
const RESTART = 57657
const RETAIN = 57658
const REUSE = 57659
const ROLE = 57660
const SECONDARY = 57661
const SECONDARY_ENGINE = 57662
const SECONDARY_LOAD = 57663
const SECONDARY_UNLOAD = 57664
const SKIP = 57665
const SRID = 57666
const THREAD_PRIORITY = 57667
const TIES = 57668
const UNBOUNDED = 57669
const VCPU = 57670
const VISIBLE = 57671

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	160, 300,
	161, 300,
	-2, 288,
	-1, 320,
	112, 640,
	-2, 636,
	-1, 321,
	112, 641,
	-2, 637,
	-1, 389,
	82, 888,
	-2, 63,
	-1, 390,
	82, 806,
	-2, 64,
	-1, 395,
	82, 775,
	-2, 602,
	-1, 397,
	82, 836,
	-2, 604,
	-1, 689,
	1, 352,
	5, 352,
	12, 352,
	13, 352,
	14, 352,
	15, 352,
	17, 352,
	19, 352,
	30, 352,
	31, 352,
	42, 352,
	43, 352,
	44, 352,
	45, 352,
	46, 352,
	48, 352,
	49, 352,
	52, 352,
	53, 352,
	55, 352,
	56, 352,
	347, 352,
	-2, 370,
	-1, 692,
	53, 44,
	55, 44,
	-2, 48,
	-1, 840,
	112, 643,
	-2, 639,
	-1, 1069,
	5, 30,
	-2, 437,
	-1, 1099,
	5, 29,
	-2, 576,
	-1, 1343,
	5, 30,
	-2, 577,
	-1, 1396,
	5, 29,
	-2, 579,
	-1, 1476,
	5, 30,
	-2, 580,
}

const yyPrivate = 57344

const yyLast = 16861

var yyAct = [...]int16{
	321, 1510, 1500, 1464, 1194, 645, 953, 1363, 1306, 325,
	1102, 1408, 1376, 1120, 1246, 338, 1280, 982, 299, 1243,
	1103, 924, 926, 1033, 1247, 548, 644, 3, 996, 57,
	1253, 962, 81, 952, 1218, 351, 264, 1259, 1147, 264,
	1061, 865, 875, 872, 1173, 913, 803, 1164, 966, 1126,
	705, 546, 290, 842, 874, 893, 789, 577, 906, 928,
	583, 992, 704, 589, 383, 517, 388, 264, 81, 308,
	597, 976, 264, 394, 264, 385, 323, 380, 298, 686,
	56, 694, 660, 61, 685, 1503, 1487, 1498, 1474, 1495,
	1307, 949, 1486, 391, 1473, 535, 1235, 291, 292, 293,
	294, 659, 1015, 297, 1390, 522, 312, 1275, 1276, 63,
	64, 65, 66, 67, 1274, 550, 1014, 1437, 610, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	943, 363, 621, 369, 370, 367, 368, 366, 365, 364,
	259, 255, 256, 257, 1019, 296, 1135, 371, 372, 1134,
	944, 945, 1136, 1013, 706, 566, 707, 571, 295, 567,
	564, 565, 251, 1155, 253, 975, 1196, 1366, 983, 1383,
	1327, 1325, 289, 778, 559, 560, 569, 777, 1198, 327,
	775, 552, 1497, 554, 610, 609, 619, 620, 612, 613,
	614, 615, 616, 617, 618, 611, 1494, 691, 621, 1465,
	1193, 907, 1457, 1010, 1007, 1008, 969, 1006, 1219, 967,
	1518, 1409, 776, 779, 551, 553, 570, 1514, 1417, 1197,
	1121, 1123, 536, 524, 1411, 253, 969, 1199, 782, 768,
	1269, 1190, 1268, 261, 1267, 518, 527, 1192, 1062, 1017,
	1020, 520, 266, 254, 969, 1027, 1221, 1446, 1026, 633,
	634, 1346, 264, 1205, 1131, 264, 1078, 252, 1088, 258,
	1181, 264, 1055, 814, 382, 700, 738, 264, 601, 519,
	81, 521, 81, 1148, 81, 81, 1012, 81, 532, 81,
	1223, 542, 1227, 1075, 1222, 81, 1220, 1438, 1292, 1179,
	611, 1225, 1410, 621, 939, 950, 621, 1122, 1011, 549,
	1224, 983, 968, 811, 808, 1472, 596, 965, 963, 804,
	964, 70, 518, 1226, 1228, 81, 961, 967, 1035, 1418,
	1416, 1455, 968, 555, 1512, 556, 557, 1513, 558, 1511,
	561, 586, 585, 1191, 594, 1189, 572, 1016, 1426, 1293,
	968, 529, 898, 530, 726, 516, 531, 71, 573, 574,
	596, 1257, 1018, 538, 539, 540, 1180, 708, 633, 634,
	849, 1185, 1182, 1175, 1183, 1178, 1237, 1174, 894, 770,
	1176, 1177, 1153, 1460, 847, 848, 846, 523, 264, 264,
	264, 894, 739, 1085, 1184, 633, 634, 81, 972, 587,
	805, 591, 1478, 81, 973, 1372, 1034, 1371, 1168, 1333,
	684, 1052, 1053, 1054, 1167, 752, 755, 756, 757, 758,
	759, 760, 391, 761, 762, 763, 764, 765, 740, 741,
	742, 743, 724, 725, 753, 866, 727, 867, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 744, 745,
	746, 747, 748, 749, 750, 751, 54, 663, 665, 528,
	669, 671, 534, 674, 525, 526, 845, 693, 541, 1156,
	1519, 1480, 702, 698, 543, 1456, 662, 664, 666, 668,
	670, 672, 673, 610, 609, 619, 620, 612, 613, 614,
	615, 616, 617, 618, 611, 1213, 1440, 621, 352, 51,
	614, 615, 616, 617, 618, 611, 754, 22, 621, 1520,
	1369, 1073, 631, 1072, 1202, 610, 609, 619, 620, 612,
	613, 614, 615, 616, 617, 618, 611, 264, 1165, 621,
	595, 594, 81, 1038, 576, 595, 594, 264, 264, 81,
	817, 818, 1239, 264, 1414, 1496, 264, 596, 1453, 264,
	51, 1309, 596, 264, 1148, 81, 81, 1143, 304, 250,
	81, 81, 81, 264, 81, 81, 868, 303, 689, 1074,
	81, 81, 619, 620, 612, 613, 614, 615, 616, 617,
	618, 611, 788, 767, 621, 683, 787, 692, 595, 594,
	774, 595, 594, 771, 832, 834, 835, 1482, 576, 81,
	833, 576, 1423, 264, 1422, 596, 792, 793, 596, 81,
	769, 794, 795, 796, 819, 798, 799, 1338, 766, 595,
	594, 800, 801, 783, 377, 378, 791, 1137, 544, 1138,
	1414, 1468, 1414, 576, 1414, 1447, 596, 839, 610, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	843, 575, 621, 81, 537, 610, 609, 619, 620, 612,
	613, 614, 615, 616, 617, 618, 611, 821, 838, 621,
	1414, 1413, 884, 887, 1361, 1360, 1289, 314, 895, 836,
	1348, 576, 1345, 576, 879, 840, 81, 81, 1299, 1298,
	1295, 1296, 970, 264, 813, 1295, 1294, 1067, 576, 910,
	576, 264, 264, 877, 576, 264, 264, 715, 714, 264,
	264, 264, 81, 880, 881, 1256, 58, 886, 889, 890,
	869, 870, 696, 24, 716, 81, 934, 877, 1341, 891,
	936, 812, 903, 1244, 772, 773, 1256, 391, 909, 933,
	780, 695, 902, 382, 904, 905, 786, 1097, 595, 594,
	954, 1098, 1127, 24, 24, 1127, 1067, 984, 985, 986,
	797, 932, 1425, 910, 697, 596, 699, 1208, 547, 910,
	547, 54, 547, 547, 937, 547, 941, 547, 940, 264,
	81, 1395, 81, 547, 791, 696, 264, 264, 264, 264,
	264, 957, 264, 264, 844, 910, 264, 81, 1256, 1297,
	828, 54, 54, 51, 998, 1139, 978, 979, 980, 981,
	942, 1067, 1091, 264, 1090, 264, 264, 1067, 630, 695,
	264, 632, 989, 990, 991, 701, 815, 697, 781, 695,
	305, 1002, 54, 1004, 994, 995, 612, 613, 614, 615,
	616, 617, 618, 611, 1488, 1378, 621, 977, 1031, 643,
	839, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	1353, 658, 661, 661, 661, 667, 661, 661, 667, 661,
	675, 676, 677, 678, 679, 680, 997, 690, 54, 1285,
	689, 1043, 1260, 1261, 689, 1142, 1044, 1045, 689, 993,
	908, 1051, 843, 988, 987, 1195, 1379, 1000, 840, 350,
	1505, 1501, 1287, 935, 341, 340, 343, 344, 345, 346,
	1057, 1263, 1244, 342, 347, 1169, 809, 785, 827, 1266,
	1265, 264, 264, 264, 264, 264, 1111, 1114, 1110, 1104,
	1112, 79, 1115, 264, 1492, 1113, 264, 1485, 1066, 820,
	264, 309, 310, 1099, 264, 915, 918, 919, 920, 916,
	1204, 917, 921, 590, 1040, 1490, 1082, 1116, 1084, 919,
	920, 1050, 879, 81, 1049, 1128, 1160, 393, 588, 1140,
	578, 713, 545, 1152, 1462, 1461, 1001, 1117, 580, 584,
	1393, 1150, 579, 1021, 1022, 1023, 1024, 1025, 954, 1028,
	1029, 1144, 1339, 1030, 1129, 602, 1130, 876, 878, 1125,
	1374, 1106, 1107, 1132, 1109, 1105, 1157, 1158, 1108, 1003,
	1032, 81, 81, 784, 923, 1149, 590, 1039, 306, 307,
	547, 1048, 300, 1145, 1146, 1431, 58, 547, 301, 1047,
	646, 1337, 1430, 1381, 1127, 568, 844, 1507, 1506, 657,
	1079, 81, 1076, 547, 547, 802, 1166, 592, 547, 547,
	547, 1507, 547, 547, 1443, 1367, 810, 264, 547, 547,
	60, 62, 1186, 1171, 55, 1, 81, 1499, 1172, 610,
	609, 619, 620, 612, 613, 614, 615, 616, 617, 618,
	611, 1308, 1375, 621, 1159, 1009, 1161, 1162, 1163, 1201,
	1463, 1210, 1200, 1407, 1279, 960, 951, 69, 515, 68,
	689, 689, 689, 689, 689, 1454, 959, 958, 1415, 1212,
	1211, 81, 81, 1365, 971, 689, 1154, 1104, 1245, 1230,
	1217, 974, 1236, 689, 1240, 1229, 1286, 1151, 1459, 721,
	719, 51, 720, 718, 723, 81, 722, 1250, 717, 277,
	386, 922, 709, 999, 1248, 593, 647, 72, 1188, 1187,
	81, 1005, 81, 81, 807, 1043, 1264, 562, 1278, 563,
	279, 629, 1255, 1046, 1133, 1270, 1271, 392, 1251, 393,
	816, 393, 840, 393, 393, 954, 393, 954, 393, 582,
	264, 1429, 1380, 1277, 393, 1282, 1083, 656, 1273, 925,
	892, 326, 831, 690, 1283, 1284, 339, 690, 264, 336,
	337, 822, 1096, 603, 81, 324, 316, 81, 81, 81,
	264, 688, 681, 914, 599, 912, 81, 318, 911, 264,
	381, 1064, 1262, 1258, 687, 1065, 1207, 1389, 1436, 826,
	26, 59, 1069, 1070, 1071, 1314, 1301, 311, 19, 1077,
	1316, 1210, 1080, 1081, 18, 17, 806, 20, 1087, 1302,
	16, 1304, 1089, 15, 1206, 1092, 1093, 1094, 1095, 1290,
	1291, 14, 1323, 533, 30, 1335, 21, 1315, 547, 13,
	547, 12, 829, 830, 11, 1340, 1104, 1119, 10, 9,
	8, 7, 6, 5, 4, 547, 393, 1350, 81, 302,
	23, 2, 710, 0, 1140, 1349, 81, 0, 0, 0,
	1359, 1320, 1321, 0, 1322, 0, 0, 1324, 0, 1326,
	0, 81, 0, 954, 0, 0, 0, 0, 81, 0,
	0, 0, 1368, 0, 1370, 646, 0, 0, 882, 883,
	915, 918, 919, 920, 916, 0, 917, 921, 1056, 0,
	1260, 1261, 0, 1377, 0, 0, 0, 0, 0, 1382,
	0, 0, 0, 0, 0, 0, 81, 81, 0, 81,
	0, 0, 1373, 1362, 81, 0, 81, 81, 81, 264,
	0, 1402, 81, 1403, 1404, 1405, 1394, 1300, 1401, 0,
	0, 1396, 0, 0, 0, 0, 948, 1248, 1412, 81,
	264, 1406, 0, 1419, 0, 1303, 1427, 0, 689, 0,
	0, 0, 0, 0, 0, 1100, 1101, 1313, 0, 690,
	690, 690, 690, 690, 0, 0, 0, 0, 0, 1216,
	1444, 393, 0, 0, 925, 81, 1124, 0, 393, 1452,
	1451, 0, 690, 0, 1445, 0, 81, 81, 0, 0,
	0, 1248, 0, 1467, 393, 393, 0, 1470, 1466, 393,
	393, 393, 0, 393, 393, 0, 0, 81, 0, 393,
	393, 1377, 954, 1104, 1475, 0, 0, 0, 264, 0,
	1420, 0, 1421, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 823, 0,
	1041, 1042, 0, 584, 0, 0, 1489, 0, 599, 81,
	547, 393, 0, 1491, 0, 0, 1493, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 1515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 0, 0, 274, 0, 24, 25, 52,
	27, 28, 871, 0, 0, 0, 635, 636, 637, 638,
	639, 640, 641, 642, 1332, 1068, 43, 0, 896, 284,
	0, 29, 48, 49, 1317, 0, 0, 0, 0, 0,
	0, 1319, 1086, 0, 0, 900, 901, 0, 0, 0,
	0, 38, 1328, 1329, 0, 54, 0, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1249, 0, 51,
	0, 393, 1342, 1343, 1344, 0, 1347, 0, 0, 0,
	267, 0, 0, 0, 393, 0, 0, 270, 0, 0,
	0, 0, 0, 1358, 0, 278, 273, 0, 610, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	0, 0, 621, 0, 0, 0, 31, 32, 34, 33,
	36, 0, 50, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 283, 1479, 0, 0, 0, 393,
	0, 393, 0, 0, 37, 44, 45, 0, 0, 46,
	47, 35, 0, 0, 0, 0, 393, 0, 0, 0,
	0, 268, 0, 0, 0, 39, 40, 0, 41, 42,
	0, 0, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 0, 1203, 393, 0, 0, 0, 280, 271,
	0, 281, 282, 287, 0, 0, 0, 272, 275, 0,
	269, 286, 285, 0, 1334, 0, 0, 1432, 1433, 1434,
	1435, 0, 1439, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 1449, 1450, 0,
	0, 0, 0, 1238, 0, 0, 1355, 1356, 1357, 609,
	619, 620, 612, 613, 614, 615, 616, 617, 618, 611,
	53, 0, 621, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 0, 1476, 547,
	0, 0, 0, 0, 0, 1272, 0, 1331, 0, 896,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 841, 0, 0, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 581,
	1249, 0, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 0, 393, 0, 0, 0, 0, 0, 0, 0,
	0, 1516, 1517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 262, 0, 0, 288, 899,
	0, 610, 609, 619, 620, 612, 613, 614, 615, 616,
	617, 618, 611, 0, 1249, 621, 51, 0, 0, 0,
	1170, 393, 1330, 315, 0, 0, 384, 0, 0, 0,
	0, 262, 0, 262, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	393, 0, 0, 0, 0, 1351, 0, 0, 1352, 0,
	605, 1354, 608, 0, 0, 0, 0, 0, 622, 623,
	624, 625, 626, 627, 628, 393, 606, 607, 604, 610,
	609, 619, 620, 612, 613, 614, 615, 616, 617, 618,
	611, 0, 0, 621, 0, 0, 610, 609, 619, 620,
	612, 613, 614, 615, 616, 617, 618, 611, 393, 1063,
	621, 0, 0, 0, 0, 0, 1502, 896, 0, 0,
	1252, 1254, 0, 0, 0, 0, 0, 0, 0, 610,
	609, 619, 620, 612, 613, 614, 615, 616, 617, 618,
	611, 0, 0, 621, 1254, 0, 610, 609, 619, 620,
	612, 613, 614, 615, 616, 617, 618, 611, 0, 393,
	621, 393, 1281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 1059, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 0, 1305, 262, 0, 1310, 1311, 1312, 0,
	262, 0, 0, 0, 0, 393, 262, 0, 1469, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	0, 0, 0, 0, 0, 1364, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	393, 0, 0, 0, 0, 0, 0, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 262, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 1399, 0, 1400, 0,
	0, 0, 0, 1364, 0, 1364, 1364, 1364, 0, 0,
	0, 1281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1364, 0,
	1214, 1215, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 1232, 0, 1233, 1234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1241, 1242,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 393, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 1477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 262, 262, 0, 0,
	1288, 0, 262, 0, 0, 262, 0, 0, 262, 0,
	0, 0, 790, 0, 0, 0, 0, 0, 1364, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1318, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 790, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 315, 315,
	0, 0, 315, 315, 315, 0, 0, 0, 897, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 315, 315,
	315, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	262, 930, 0, 0, 262, 262, 0, 0, 262, 938,
	790, 0, 0, 0, 0, 0, 0, 0, 1384, 1385,
	1386, 1387, 1388, 0, 0, 1391, 1392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 262, 262, 262, 262, 262,
	0, 262, 262, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 1036, 1037, 0, 0, 0, 262,
	0, 0, 0, 0, 790, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	262, 262, 262, 262, 262, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 262, 0, 0, 0, 930,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 790, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 930, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 262,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 80, 0, 955, 956, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	1141, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 467, 0, 897, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 262, 398, 119,
	489, 496, 445, 265, 500, 443, 442, 503, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 493, 424, 432, 105, 430, 193, 172, 231, 466,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 403,
	0, 212, 234, 249, 99, 419, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 80, 0, 955,
	956, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 445, 265, 500, 443, 442, 503,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 493, 424, 432, 105, 430, 193, 172,
	231, 466, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 403, 0, 212, 234, 249, 99, 419, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 54, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 445, 265, 500, 443,
	442, 503, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 493, 424, 432, 105, 430,
	193, 172, 231, 466, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 403, 0, 212, 234, 249, 99, 419,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 415, 418, 413, 414, 461, 462, 508, 509,
	510, 486, 409, 0, 416, 417, 0, 491, 498, 499,
	465, 82, 91, 138, 246, 186, 116, 235, 399, 412,
	109, 422, 0, 0, 434, 439, 440, 452, 454, 455,
	456, 457, 464, 471, 472, 474, 480, 481, 482, 483,
	488, 495, 514, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 502,
	490, 0, 447, 505, 421, 437, 513, 438, 441, 478,
	406, 460, 165, 435, 0, 425, 401, 431, 402, 423,
	449, 111, 453, 420, 492, 463, 504, 137, 511, 139,
	469, 0, 211, 153, 0, 0, 451, 494, 458, 487,
	446, 479, 411, 468, 506, 436, 476, 507, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 473, 501, 433, 475, 477, 400, 470, 0,
	404, 407, 512, 497, 428, 429, 0, 0, 0, 0,
	0, 0, 0, 450, 459, 484, 444, 0, 0, 0,
	0, 0, 0, 1209, 0, 426, 0, 467, 0, 0,
	0, 408, 405, 0, 0, 448, 0, 0, 0, 410,
	0, 427, 485, 0, 398, 119, 489, 496, 445, 265,
	500, 443, 442, 503, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 493, 424, 432,
	105, 430, 193, 172, 231, 466, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 403, 0, 212, 234, 249,
	99, 419, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 415, 418, 413, 414, 461, 462,
	508, 509, 510, 486, 409, 0, 416, 417, 0, 491,
	498, 499, 465, 82, 91, 138, 246, 186, 116, 235,
	399, 412, 109, 422, 0, 0, 434, 439, 440, 452,
	454, 455, 456, 457, 464, 471, 472, 474, 480, 481,
	482, 483, 488, 495, 514, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 502, 490, 0, 447, 505, 421, 437, 513, 438,
	441, 478, 406, 460, 165, 435, 0, 425, 401, 431,
	402, 423, 449, 111, 453, 420, 492, 463, 504, 137,
	511, 139, 469, 0, 211, 153, 0, 0, 451, 494,
	458, 487, 446, 479, 411, 468, 506, 436, 476, 507,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 473, 501, 433, 475, 477, 400,
	470, 0, 404, 407, 512, 497, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 450, 459, 484, 444, 0,
	0, 0, 0, 0, 0, 939, 0, 426, 0, 467,
	0, 0, 0, 408, 405, 0, 0, 448, 0, 0,
	0, 410, 0, 427, 485, 0, 398, 119, 489, 496,
	445, 265, 500, 443, 442, 503, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 493,
	424, 432, 105, 430, 193, 172, 231, 466, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 403, 0, 212,
	234, 249, 99, 419, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 0, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 0,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 320, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	0, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 837, 0, 426,
	0, 467, 0, 0, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 0, 398, 119,
	489, 496, 445, 265, 500, 443, 442, 503, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 493, 424, 432, 105, 430, 193, 172, 231, 466,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 403,
	0, 212, 234, 249, 99, 419, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 445, 265, 500, 443, 442, 503,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 493, 424, 432, 105, 430, 193, 172,
	231, 466, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 403, 0, 212, 234, 249, 99, 419, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 0, 0, 0, 320,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 445, 265, 500, 443,
	442, 503, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 493, 424, 432, 105, 430,
	193, 172, 231, 466, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 403, 0, 212, 234, 249, 99, 419,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 415, 418, 413, 414, 461, 462, 508, 509,
	510, 486, 409, 0, 416, 417, 0, 491, 498, 499,
	465, 82, 91, 138, 246, 186, 116, 235, 399, 412,
	109, 422, 0, 0, 434, 439, 440, 452, 454, 455,
	456, 457, 464, 471, 472, 474, 480, 481, 482, 483,
	488, 495, 514, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 502,
	490, 0, 447, 505, 421, 437, 513, 438, 441, 478,
	406, 460, 165, 435, 0, 425, 401, 431, 402, 423,
	449, 111, 453, 420, 492, 463, 504, 137, 511, 139,
	469, 0, 211, 153, 0, 0, 451, 494, 458, 487,
	446, 479, 411, 468, 506, 436, 476, 507, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 473, 501, 433, 475, 477, 400, 470, 0,
	404, 407, 512, 497, 428, 429, 0, 0, 0, 0,
	0, 0, 0, 450, 459, 484, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 467, 0, 0,
	0, 408, 405, 0, 0, 448, 0, 0, 0, 410,
	0, 427, 485, 0, 398, 119, 489, 496, 445, 265,
	500, 443, 442, 503, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 493, 424, 432,
	105, 430, 193, 172, 231, 466, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 396, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 403, 0, 212, 234, 249,
	99, 419, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 397, 395, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 415, 418, 413, 414, 461, 462,
	508, 509, 510, 486, 409, 0, 416, 417, 0, 491,
	498, 499, 465, 82, 91, 138, 246, 186, 116, 235,
	399, 412, 109, 422, 0, 0, 434, 439, 440, 452,
	454, 455, 456, 457, 464, 471, 472, 474, 480, 481,
	482, 483, 488, 495, 514, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 502, 490, 0, 447, 505, 421, 437, 513, 438,
	441, 478, 406, 460, 165, 435, 0, 425, 401, 431,
	402, 423, 449, 111, 453, 420, 492, 463, 504, 137,
	511, 139, 469, 0, 211, 153, 0, 0, 451, 494,
	458, 487, 446, 479, 411, 468, 506, 436, 476, 507,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 473, 501, 433, 475, 477, 400,
	470, 0, 404, 407, 512, 497, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 450, 459, 484, 444, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 0, 467,
	0, 0, 0, 408, 405, 0, 0, 448, 0, 0,
	0, 410, 0, 427, 485, 0, 398, 119, 489, 496,
	445, 265, 500, 443, 442, 503, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 493,
	424, 432, 105, 430, 193, 172, 231, 466, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 403, 0, 212,
	234, 249, 99, 419, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 0, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 0,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	0, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 467, 0, 0, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 0, 398, 119,
	489, 496, 445, 265, 500, 443, 442, 503, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 493, 424, 432, 105, 430, 193, 172, 231, 466,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 703, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 396, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 403,
	0, 212, 234, 249, 99, 419, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 397, 395, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 445, 265, 500, 443, 442, 503,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 493, 424, 432, 105, 430, 193, 172,
	231, 466, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 387, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 396,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 403, 0, 212, 234, 249, 99, 419, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 397, 395, 390,
	389, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 322, 0, 0, 0, 111, 0, 319, 0,
	0, 0, 137, 362, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 0,
	0, 946, 0, 54, 0, 0, 320, 341, 340, 343,
	344, 345, 346, 0, 0, 101, 342, 347, 348, 349,
	947, 0, 0, 317, 334, 0, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 332, 0, 0,
	0, 0, 375, 0, 333, 0, 0, 328, 329, 330,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 265, 0, 0, 373, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 363,
	374, 369, 370, 367, 368, 366, 365, 364, 376, 355,
	356, 357, 358, 360, 0, 371, 372, 359, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 873,
	0, 322, 0, 0, 0, 111, 0, 319, 0, 0,
	0, 137, 362, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 320, 341, 340, 343, 344,
	345, 346, 0, 0, 101, 342, 347, 348, 349, 0,
	0, 0, 317, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 313, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 265, 0, 0, 373, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	322, 0, 0, 0, 111, 0, 319, 0, 0, 0,
	137, 362, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 576, 320, 341, 340, 343, 344, 345,
	346, 0, 0, 101, 342, 347, 348, 349, 0, 0,
	0, 317, 334, 0, 361, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 331, 332, 0, 0, 0, 0,
	375, 0, 333, 0, 0, 328, 329, 330, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 265, 0, 0, 373, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 363, 374, 369,
	370, 367, 368, 366, 365, 364, 376, 355, 356, 357,
	358, 360, 0, 371, 372, 359, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 322,
	0, 0, 0, 111, 0, 319, 0, 0, 0, 137,
	362, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 320, 341, 340, 343, 344, 345, 346,
	0, 0, 101, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 313, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 265, 0, 0, 373, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 363, 374, 369, 370,
	367, 368, 366, 365, 364, 376, 355, 356, 357, 358,
	360, 0, 371, 372, 359, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 322, 0,
	0, 0, 111, 0, 319, 0, 0, 0, 137, 362,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 320, 341, 888, 343, 344, 345, 346, 0,
	0, 101, 342, 347, 348, 349, 0, 0, 0, 317,
	334, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 332, 313, 0, 0, 0, 375, 0,
	333, 0, 0, 328, 329, 330, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 322, 0, 0,
	0, 111, 0, 319, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 885, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 317, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 313, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 265,
	0, 0, 373, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 322, 0,
	0, 0, 111, 0, 319, 0, 0, 0, 137, 362,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 353,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 320, 341, 340, 343, 344, 345, 346, 0,
	0, 101, 342, 347, 348, 349, 0, 0, 0, 317,
	334, 0, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 332, 0, 0, 0, 0, 375, 0,
	333, 0, 0, 328, 329, 330, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 363, 374, 369, 370, 367,
	368, 366, 365, 364, 376, 355, 356, 357, 358, 360,
	0, 371, 372, 359, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 322, 0, 0,
	0, 111, 0, 319, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 317, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 265,
	0, 0, 373, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 362, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 353, 354, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	320, 341, 340, 343, 344, 345, 346, 0, 0, 101,
	342, 347, 348, 349, 0, 0, 0, 0, 334, 0,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	331, 332, 0, 0, 0, 0, 375, 0, 333, 0,
	0, 328, 329, 330, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 1509, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 363, 374, 369, 370, 367, 368, 366,
	365, 364, 376, 355, 356, 357, 358, 360, 0, 371,
	372, 359, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 576, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 0, 0, 0, 0, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 265, 0, 0,
	373, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 363, 374, 369, 370, 367, 368, 366, 365,
	364, 376, 355, 356, 357, 358, 360, 0, 371, 372,
	359, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 362, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 0, 0, 0, 0, 54, 0, 0, 320, 341,
	340, 343, 344, 345, 346, 0, 0, 101, 342, 347,
	348, 349, 0, 0, 0, 0, 334, 0, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 331, 332,
	0, 0, 0, 0, 375, 0, 333, 0, 0, 328,
	329, 330, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 265, 0, 0, 373,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 363, 374, 369, 370, 367, 368, 366, 365, 364,
	376, 355, 356, 357, 358, 360, 0, 371, 372, 359,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 609, 619, 620, 612, 613, 614,
	615, 616, 617, 618, 611, 0, 0, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 265, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 598, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 0, 600, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 595, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	76, 77, 0, 73, 0, 0, 0, 78, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 929,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 931, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 265, 0, 0, 0, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 165, 0, 0, 0,
	929, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 931, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 265, 0, 0, 0, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	927, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 824, 0, 0,
	825, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 712, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 711, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 54,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 931, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 600, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 265, 0,
	0, 0, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 0, 0, 0, 682, 111,
	0, 0, 0, 0, 0, 137, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 265, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 379,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 265, 0, 0, 0, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	260, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242,
}

var yyPact = [...]int16{
	1521, -1000, -267, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1001, 1045, -1000, -1000, -1000, -1000, -1000, -1000,
	257, 11548, 37, 120, 18, 15527, 119, 1492, 16185, -1000,
	6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -60, -73,
	-1000, 738, -1000, -1000, -1000, -1000, -1000, 995, 1002, 814,
	988, 891, -1000, 8246, 98, 98, 15198, 6930, -1000, -1000,
	255, 16185, 117, 16185, -144, 95, 95, 95, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	113, 16185, 226, -1000, 16185, 94, 587, 94, 94, 94,
	16185, -1000, 169, -1000, -1000, -1000, 16185, 561, 932, 3852,
	58, 3852, -1000, 3852, 3852, -1000, 3852, 14, 3852, -63,
	1013, 15, -2, -1000, 3852, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 468, 941,
	9574, 9574, 1001, -1000, 738, -1000, -1000, -1000, 922, -1000,
	-1000, 326, 1026, -1000, 11219, 156, -1000, 9574, 1856, 768,
	-1000, -1000, 768, -1000, -1000, 136, -1000, -1000, 10561, 10561,
	10561, 10561, 10561, 10561, 10561, 10561, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	768, -1000, 9245, 768, 768, 768, 768, 768, 768, 768,
	768, 9574, 768, 768, 768, 768, 768, 768, 768, 768,
	768, 768, 768, 768, 768, 768, 768, 14862, 13875, 16185,
	764, 701, -1000, -1000, 153, 760, 6588, -77, -1000, -1000,
	-1000, 275, 13546, -1000, -1000, -1000, 931, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 642, 16185, -1000, 236, -1000,
	551, 3852, 104, 543, 295, 526, 16185, 16185, 3852, 22,
	54, 50, 16185, 763, 102, 16185, 980, 855, 16185, 519,
	515, -1000, 6246, -1000, 3852, 3852, -1000, -1000, -1000, 3852,
	3852, 3852, 16185, 3852, 3852, -1000, -1000, -1000, -1000, 3852,
	3852, -1000, 1024, 298, -1000, -1000, -1000, -1000, 9574, 214,
	-1000, 854, -1000, -1000, -1000, -1000, -1000, -1000, 1037, 211,
	666, 151, 761, -1000, 506, 995, 468, 891, 13217, 865,
	-1000, -1000, 16185, -1000, 9574, 9574, 516, -1000, 14533, -1000,
	-1000, 4878, 217, 10561, 392, 284, 10561, 10561, 10561, 10561,
	10561, 10561, 10561, 10561, 10561, 10561, 10561, 10561, 10561, 10561,
	10561, 368, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	499, -1000, 738, 836, 836, 189, 189, 189, 189, 189,
	189, 189, 10890, 7588, 468, 638, 509, 9245, 8246, 8246,
	9574, 9574, 8904, 8575, 8246, 985, 290, 509, 16514, -1000,
	-1000, 10232, -1000, -1000, -1000, -1000, -1000, 468, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15856, 15856, 8246, 8246, 8246,
	8246, 49, 16185, -1000, 698, 893, -1000, -1000, -1000, 982,
	12559, 12888, 49, 676, 13875, 16185, -1000, -1000, 13875, 16185,
	4536, 5904, 760, -77, 745, -1000, -102, -84, 7259, 188,
	-1000, -1000, -1000, -1000, 3510, 178, 626, 320, -49, -1000,
	-1000, -1000, 783, -1000, 783, 783, 783, 783, -21, -21,
	-21, -21, -1000, -1000, -1000, -1000, -1000, 830, 829, -1000,
	783, 783, 783, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 825, 825, 825, 812, 812, 834, -1000, 16185, 3852,
	976, 3852, -1000, 87, -1000, 16185, 16185, 16185, 16185, 16185,
	128, 16185, 16185, 754, -1000, 16185, 3852, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16185, 306, 16185, 16185, 509, -1000, 464, 16185,
	-1000, 906, 9574, 9574, 5562, 9574, -1000, -1000, -1000, 941,
	-1000, 985, 1000, -1000, 920, 917, 8246, -1000, -1000, 217,
	261, -1000, -1000, 333, -1000, -1000, -1000, -1000, 150, 768,
	-1000, 1923, -1000, -1000, -1000, -1000, 392, 10561, 10561, 10561,
	91, 1923, 1906, 467, 1665, 189, 391, 391, 186, 186,
	186, 186, 186, 729, 729, -1000, -1000, -1000, 468, -1000,
	-1000, -1000, 468, 8246, 752, -1000, -1000, 9574, -1000, 468,
	632, 632, 448, 537, 272, 1021, 632, 245, 1019, 632,
	632, 8246, 303, -1000, 9574, 468, -1000, 146, -1000, 535,
	749, 747, 632, 468, 632, 632, 707, 768, -1000, 16514,
	13875, 13875, 13875, 13875, 13875, -1000, 876, 874, -1000, 878,
	875, 905, 16185, -1000, 634, 12559, 170, 768, -1000, 14204,
	-1000, -1000, 1012, 13875, 730, -1000, 730, -1000, 142, -1000,
	-1000, 745, -77, -87, -1000, -1000, -1000, -1000, 509, -1000,
	560, 740, 3168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	821, 490, -1000, 953, 198, 216, 487, 943, -1000, -1000,
	-1000, 934, -1000, 304, -52, -1000, -1000, 399, -21, -21,
	-1000, -1000, 188, 926, 188, 188, 188, 459, 459, -1000,
	-1000, -1000, -1000, 344, -1000, -1000, -1000, 338, -1000, 853,
	15856, 3852, -1000, -1000, -1000, -1000, 232, 232, 209, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48, 832, -1000, -1000, -1000, -1000, 8, 20, 101, -1000,
	3852, -1000, 298, -1000, 445, 9574, -1000, -1000, -1000, -1000,
	901, 509, 509, 141, -1000, -1000, 16185, -1000, -1000, -1000,
	-1000, 746, -1000, -1000, -1000, 4194, 8246, -1000, 91, 1923,
	412, -1000, 10561, 10561, -1000, -1000, 632, 8246, 509, -1000,
	-1000, -1000, 100, 368, 100, 10561, 10561, -1000, 10561, 10561,
	-1000, -163, 691, 285, -1000, 9574, 453, -1000, 5562, -1000,
	10561, 10561, -1000, -1000, -1000, -1000, 850, 16514, 768, -1000,
	12218, 15856, 733, -1000, 269, 893, 820, 849, 1278, -1000,
	-1000, -1000, -1000, 868, -1000, 867, -1000, -1000, -1000, -1000,
	-1000, 110, 108, 106, 15856, -1000, 1001, 9574, 730, -1000,
	-1000, 195, -1000, -1000, -119, -130, -1000, -1000, -1000, 3510,
	-1000, 3510, 15856, 70, -1000, 487, 487, -1000, -1000, -1000,
	815, 840, 10561, -1000, -1000, -1000, 610, 188, 188, -1000,
	231, -1000, -1000, -1000, 630, -1000, 625, 734, 623, 16185,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 16185, -1000, -1000,
	-1000, -1000, -1000, 15856, -172, 484, 15856, 15856, 15856, 16185,
	-1000, 306, -1000, 509, -1000, 5220, -1000, 1012, 13875, -1000,
	-1000, 468, -1000, 10561, 1923, 1923, -1000, -1000, 468, 783,
	783, -1000, 783, 812, -1000, 783, -3, 783, -4, 468,
	468, 1873, 1778, 1525, 380, 768, 995, -1000, 509, 9574,
	-1000, 966, 552, -1000, 955, 671, 663, -1000, -1000, 7917,
	468, 617, 139, 615, -1000, 1001, 16514, 9574, -1000, -1000,
	9574, 796, -1000, 9574, -1000, -1000, -1000, 768, 768, 768,
	615, 995, 509, -1000, -1000, -1000, -1000, 3168, -1000, 609,
	-1000, 783, -1000, -1000, -1000, 15856, -44, 1036, 1923, -1000,
	-1000, -1000, -1000, -1000, -21, 441, -21, 337, -1000, 335,
	3852, -1000, -1000, -1000, -1000, 964, -1000, 5220, -1000, -1000,
	781, 833, -1000, -1000, -1000, 1010, 704, -1000, 1923, -1000,
	-1000, 112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10561, 10561, 10561, 10561, 10561, -151, 509, 10561, 10561, 942,
	-1000, 768, -1000, -1000, 737, 15856, 15856, -1000, 15856, 995,
	-1000, 509, 509, 15856, 509, 15856, 15856, 15856, 11877, -1000,
	158, 15856, -1000, 605, -1000, 190, -1000, -109, 188, -1000,
	188, 538, 536, -1000, 768, 697, -1000, 256, 15856, 16185,
	1008, 999, -1000, -1000, 535, 535, 535, 535, 25, 468,
	427, 535, 535, 1035, -1000, 768, -1000, 738, 135, -1000,
	-1000, -1000, 569, 567, 567, 567, 170, 158, -1000, 481,
	239, 406, -1000, 61, 15856, 307, 937, -1000, 936, -1000,
	-1000, -1000, -1000, -1000, 47, 5220, 3510, 565, -1000, -1000,
	9574, 9574, -1000, -1000, -1000, -1000, 468, 45, -175, -1000,
	-1000, -1000, -1000, 16514, 663, 468, 15856, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 332, -1000, -1000, 16185, -1000, -1000,
	402, -1000, -1000, 532, -1000, 15856, -1000, -1000, 832, 509,
	662, -1000, 888, -169, -178, 650, -1000, -1000, -1000, 780,
	-1000, -1000, 47, 911, -172, -1000, 885, -1000, 15856, -1000,
	42, -1000, -173, 479, 27, -176, 839, 768, -179, 838,
	-1000, 1018, 9903, -1000, -1000, 1032, 187, 187, 535, 468,
	-1000, -1000, -1000, 74, 431, -1000, -1000, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 1281, 26, 497, 1280, 1279, 1274, 1273, 1272, 1271,
	1270, 1269, 1268, 1264, 1261, 1259, 1256, 1254, 1253, 1251,
	1243, 1240, 1237, 1235, 1234, 1228, 83, 1227, 1221, 1220,
	63, 1219, 69, 1218, 1217, 40, 54, 43, 42, 667,
	1216, 21, 84, 79, 1214, 37, 1213, 1212, 77, 1210,
	1208, 45, 1205, 1203, 197, 1202, 64, 1201, 13, 49,
	1196, 1195, 1193, 1192, 76, 1207, 1191, 1190, 15, 1189,
	1186, 82, 1182, 53, 5, 14, 35, 24, 1181, 179,
	9, 1180, 55, 1177, 1176, 1172, 1171, 29, 1169, 60,
	1160, 18, 57, 1158, 7, 58, 30, 19, 10, 75,
	62, 1157, 20, 66, 50, 1154, 1153, 549, 1151, 1150,
	46, 1149, 1147, 23, 1144, 95, 377, 1141, 1139, 1138,
	1137, 73, 0, 889, 25, 70, 1135, 1133, 1132, 1829,
	56, 59, 22, 1131, 52, 51, 41, 1130, 1129, 34,
	1128, 1126, 1124, 1123, 1122, 1120, 1119, 71, 1118, 1117,
	1116, 17, 91, 1111, 1106, 61, 28, 1104, 1103, 1098,
	47, 65, 1097, 1096, 48, 38, 1095, 1089, 1088, 1087,
	1086, 33, 6, 1085, 16, 1084, 11, 1083, 31, 1080,
	3, 1075, 12, 1072, 8, 1071, 4, 44, 1, 1057,
	2, 1055, 1054, 488, 342, 81, 1051, 101,
}

var yyR1 = [...]uint8{
	0, 191, 192, 192, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 195, 195, 48, 48, 49, 49, 95, 95,
	10, 10, 10, 10, 100, 100, 104, 104, 104, 105,
	105, 105, 105, 137, 137, 11, 11, 11, 11, 11,
	11, 11, 186, 186, 185, 184, 184, 183, 183, 182,
	17, 167, 169, 169, 168, 168, 168, 168, 161, 140,
	140, 140, 140, 143, 143, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 142, 142, 142, 142, 142, 144,
	144, 144, 144, 144, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 160, 160, 147,
	147, 155, 155, 156, 156, 156, 153, 153, 154, 154,
	157, 157, 157, 149, 149, 150, 150, 158, 158, 151,
	151, 151, 152, 152, 152, 159, 159, 159, 159, 159,
	148, 148, 162, 162, 177, 177, 176, 176, 176, 166,
	166, 173, 173, 173, 173, 173, 164, 164, 165, 165,
	175, 175, 174, 163, 163, 178, 178, 178, 178, 189,
	190, 188, 188, 188, 188, 188, 170, 170, 170, 171,
	171, 171, 172, 172, 172, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 181, 179, 179, 180, 180, 13, 18, 18,
	14, 14, 14, 14, 14, 15, 15, 19, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 111, 111, 109, 109,
	112, 112, 110, 110, 110, 113, 113, 113, 114, 114,
	138, 138, 138, 21, 21, 23, 23, 24, 25, 22,
	22, 22, 22, 22, 22, 22, 16, 196, 26, 27,
	27, 28, 28, 28, 32, 32, 32, 30, 30, 31,
	31, 37, 37, 36, 36, 38, 38, 38, 38, 126,
	126, 126, 125, 125, 40, 40, 41, 41, 42, 42,
	43, 43, 43, 43, 57, 57, 94, 94, 96, 96,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	133, 133, 132, 132, 132, 131, 131, 50, 50, 50,
	52, 51, 51, 51, 51, 53, 53, 55, 55, 54,
	54, 56, 58, 58, 58, 58, 59, 59, 39, 39,
	39, 39, 39, 39, 39, 108, 108, 61, 61, 60,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 72,
	72, 72, 72, 72, 72, 62, 62, 62, 62, 62,
	62, 62, 35, 35, 73, 73, 73, 79, 74, 74,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 69, 69, 69, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 197, 197, 71, 70, 70, 70,
	70, 70, 70, 33, 33, 33, 33, 33, 136, 136,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 83, 83, 34, 34, 81, 81, 82,
	84, 84, 80, 80, 80, 64, 64, 64, 64, 64,
	64, 64, 64, 66, 66, 66, 85, 85, 86, 86,
	87, 87, 88, 88, 89, 90, 90, 90, 91, 91,
	91, 91, 92, 92, 92, 63, 63, 63, 63, 63,
	63, 93, 93, 93, 93, 97, 97, 75, 75, 77,
	77, 76, 78, 98, 98, 102, 99, 99, 103, 103,
	103, 103, 101, 101, 101, 128, 128, 128, 106, 106,
	115, 115, 116, 116, 107, 107, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 118, 118, 118, 119,
	119, 120, 120, 120, 127, 127, 123, 123, 124, 124,
	129, 129, 130, 130, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	193, 194, 134, 135, 135, 135,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 6, 7, 5, 10, 1,
	3, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 1, 2, 0, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 0, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 7, 7,
	4, 5, 7, 5, 5, 5, 12, 7, 5, 9,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 2, 3,
	3, 2, 3, 4, 3, 7, 5, 4, 2, 4,
	4, 3, 3, 5, 2, 3, 1, 1, 0, 1,
	1, 1, 0, 2, 2, 0, 2, 2, 0, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 3, 3, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 8, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int16{
	-1000, -191, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 30,
	-17, 115, 116, 118, 117, 150, 119, 143, 50, 164,
	165, 167, 168, 25, 144, 145, 148, 149, 31, 32,
	121, -193, 8, 249, 54, -192, 347, -87, 15, -28,
	5, -26, -196, -26, -26, -26, -26, -26, -167, -169,
	54, 90, -120, 125, 72, 241, 122, 123, 129, -123,
	57, -122, 259, 136, 291, 292, 164, 175, 169, 196,
	188, 260, 293, 137, 186, 189, 228, 135, 294, 216,
	223, 66, 167, 237, 295, 146, 184, 180, 296, 268,
	178, 27, 297, 225, 201, 298, 264, 179, 224, 121,
	299, 139, 133, 300, 202, 206, 301, 229, 302, 303,
	304, 173, 174, 305, 231, 200, 134, 33, 261, 35,
	154, 232, 204, 306, 199, 195, 307, 308, 309, 310,
	198, 172, 194, 39, 208, 207, 209, 227, 191, 311,
	312, 313, 140, 314, 181, 18, 315, 316, 317, 318,
	319, 235, 149, 320, 152, 321, 322, 323, 324, 325,
	326, 226, 203, 205, 130, 156, 263, 327, 233, 177,
	328, 141, 153, 148, 236, 142, 329, 330, 331, 332,
	333, 334, 335, 168, 336, 337, 338, 339, 163, 230,
	239, 38, 213, 340, 171, 132, 341, 165, 160, 218,
	192, 155, 342, 343, 182, 183, 197, 170, 193, 166,
	157, 150, 344, 238, 214, 265, 190, 187, 161, 345,
	158, 159, 346, 219, 220, 162, 262, 234, 185, 215,
	-107, 125, 220, 127, 123, 123, 124, 125, 241, 122,
	123, -54, -129, 57, -122, 125, 123, 108, 189, 228,
	115, 217, 225, 124, 33, 226, 156, -138, 123, -109,
	216, 219, 220, 162, 57, 230, 229, 221, -129, 166,
	-134, -134, -134, -134, -134, 218, 218, -134, -2, -91,
	17, 16, -5, -3, -193, 6, 20, 21, -32, 40,
	41, -27, -38, 99, -39, -129, -60, 74, -65, 29,
	57, -122, 23, -64, -61, -80, -78, -79, 108, 109,
	110, 97, 98, 105, 75, 111, -69, -67, -68, -70,
	59, 58, 67, 60, 61, 62, 63, 68, 69, 70,
	-123, -76, -193, 44, 45, 250, 251, 252, 253, 258,
	254, 77, 34, 240, 248, 247, 246, 244, 245, 242,
	243, 256, 257, 128, 241, 103, 249, -107, -107, 11,
	-48, -49, -54, -56, -129, -99, -137, 166, -103, 230,
	229, -124, -101, -123, -121, 228, 189, 227, 120, 266,
	73, 22, 24, 211, 76, 108, 16, 77, 107, 250,
	115, 48, 267, 242, 243, 240, 252, 253, 241, 217,
	29, 10, 269, 25, 144, 21, 101, 117, 80, 81,
	147, 23, 145, 70, 272, 19, 51, 11, 13, 273,
	274, 14, 128, 127, 92, 124, 46, 8, 111, 26,
	89, 42, 275, 28, 276, 277, 278, 279, 44, 90,
	17, 244, 245, 31, 280, 258, 151, 103, 49, 36,
	74, 281, 282, 68, 283, 71, 52, 72, 15, 47,
	284, 285, 286, 287, 91, 118, 249, 45, 288, 122,
	6, 255, 30, 143, 43, 289, 123, 79, 256, 257,
	126, 69, 5, 129, 32, 9, 50, 53, 246, 247,
	248, 34, 78, 12, 290, -168, 90, -161, 57, -54,
	124, -54, 249, -116, 128, -116, -116, 123, -54, 115,
	117, 120, 52, -18, -54, -115, 128, 57, -115, -115,
	-115, -54, 112, -54, 57, 30, -135, -193, -124, 241,
	57, 156, 123, 157, 125, -135, -135, -135, -135, 160,
	161, -135, -112, -111, 223, 224, 218, 222, 12, 161,
	218, 159, -135, -134, -134, -194, 56, -92, 19, 31,
	-39, -129, -88, -89, -39, -87, -2, -26, 36, -30,
	21, 65, 11, -126, 73, 72, 89, -125, 22, -123,
	59, 112, -39, -62, 92, 74, 90, 91, 76, 94,
	93, 104, 97, 98, 99, 100, 101, 102, 103, 95,
	96, 107, 82, 83, 84, 85, 86, 87, 88, -108,
	-193, -79, -193, 113, 114, -65, -65, -65, -65, -65,
	-65, -65, -65, -193, -2, -74, -39, -193, -193, -193,
	-193, -193, -193, -193, -193, -193, -83, -39, -193, -197,
	-71, -193, -197, -71, -197, -71, -197, -193, -197, -71,
	-197, -71, -197, -197, -71, -193, -193, -193, -193, -193,
	-193, -55, 26, -54, -41, -42, -43, -44, -57, -79,
	-193, -54, -54, -48, -195, 55, 11, 53, -195, 55,
	112, 55, -99, 166, -100, -104, 231, 233, 82, -128,
	-123, 59, 29, 30, 56, 55, -54, -140, -143, -145,
	-144, -146, -141, -142, 186, 187, 108, 190, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 30, 146,
	182, 183, 184, 185, 202, 203, 204, 205, 206, 207,
	208, 209, 169, 188, 260, 170, 171, 172, 173, 174,
	175, 177, 178, 179, 180, 181, 57, -135, 125, 57,
	74, 57, -54, -54, -135, 158, 158, 123, 123, 163,
	-54, 55, 126, -48, 23, 52, -54, 57, 57, -130,
	-129, -121, -135, -135, -135, -135, -135, -54, -135, -135,
	-135, -135, 11, -110, 11, 92, -39, -114, 90, 52,
	9, 92, 55, 18, 112, 55, -90, 24, 25, -91,
	-194, -32, -66, -123, 60, 63, -31, 43, -54, -39,
	-39, -72, 68, 74, 69, 70, -125, 99, -130, -124,
	-121, -65, -73, -76, -79, 64, 92, 90, 91, 76,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -136, 57, 59, 57, -64,
	-64, -123, -37, 21, -36, -38, -194, 55, -194, -2,
	-36, -36, -39, -39, -80, 59, -36, -80, 59, -36,
	-36, -30, -81, -82, 78, -80, -123, -129, -194, -65,
	-123, -123, -36, -37, -36, -36, -95, 152, -54, 30,
	55, -50, -52, -51, -53, 42, 46, 48, 43, 44,
	45, 49, -133, 22, -41, -193, -132, 152, -131, 22,
	-129, 59, -95, 53, -41, -54, -41, -56, -129, 99,
	-103, -100, 55, 232, 234, 235, 52, 71, -39, -152,
	107, -170, -171, -172, -124, 59, 60, -161, -162, -163,
	-173, 138, -178, 130, 132, 129, -164, 139, 124, 28,
	56, -157, 68, 74, -153, 214, -147, 54, -147, -147,
	-147, -147, -151, 189, -151, -151, -151, 54, 54, -147,
	-147, -147, -155, 54, -155, -155, -156, 54, -156, -127,
	53, -54, -135, 23, -135, -117, 120, 117, 118, -181,
	116, 211, 189, 66, 29, 15, 250, 152, 265, 57,
	153, -54, -54, -54, -54, -54, 120, 117, -54, -54,
	-54, -135, -54, -113, 90, 12, -129, -129, 59, -54,
	38, -39, -39, -130, -89, -92, -106, 19, 11, 34,
	34, -36, 68, 69, 70, 112, -193, -73, -65, -65,
	-65, -35, 147, 73, -194, -194, -36, 55, -39, -194,
	-194, -194, 55, 53, 22, 11, 11, -194, 11, 11,
	-194, -194, -36, -84, -82, 80, -39, -194, 112, -194,
	55, 55, -194, -194, -194, -194, -63, 30, 34, -2,
	-193, -193, -98, -102, -80, -42, -43, -43, -42, -43,
	42, 42, 42, 47, 42, 47, 42, -51, -129, -194,
	-58, 50, 127, 51, -193, -131, -59, 12, -41, -59,
	-59, 112, -104, -105, 236, 233, 239, 57, 59, 55,
	-172, 82, 54, 57, 28, -164, -164, -165, 57, -165,
	28, -149, 29, 68, -154, 215, 60, -151, -151, -152,
	30, -152, -152, -152, -160, 59, -160, 60, 60, 52,
	-123, -135, -134, -187, 135, 131, 138, 139, 133, 57,
	124, 28, 130, 132, 152, 129, -187, -118, -119, 126,
	22, 124, 28, 152, -186, 53, 158, 211, 158, 126,
	-135, -110, 59, -39, 39, 112, -54, -40, 11, 99,
	-124, -37, -35, 73, -65, -65, -194, -38, -139, 108,
	186, 146, 184, 180, 200, 191, 213, 182, 214, -136,
	-139, -65, -65, -65, -65, 259, -87, 81, -39, 79,
	-124, -65, -65, -97, 52, -98, -75, -77, -76, -193,
	-2, -93, -123, -96, -123, -59, 55, 82, -46, -45,
	52, 53, -47, 52, -45, 42, 42, 124, 124, 124,
	-96, -87, -39, -59, 233, 237, 238, -171, -172, -175,
	-174, -123, -178, -165, -165, 54, -150, 52, -65, 56,
	-152, -152, 57, 108, 56, 55, 56, 55, 56, 55,
	-54, -134, -134, -54, -134, -123, -184, 262, -185, 57,
	-123, -123, -123, -54, -113, -59, -41, -194, -65, -194,
	-147, -147, -147, -156, -147, 174, -147, 174, -194, -194,
	19, 19, 19, 19, -193, -91, -39, 55, 55, 27,
	-97, 55, -194, -194, -194, 55, 112, -194, 55, -87,
	-102, -39, -39, 54, -39, -193, -193, -193, -194, -91,
	56, 55, -147, -94, -123, -158, 211, 9, -151, 59,
	-151, 60, 60, -135, 26, -183, -182, -124, 54, 53,
	-85, 13, -151, 57, -65, -65, -65, -65, -65, -34,
	255, -65, -65, 28, -77, 34, -2, -193, -123, -123,
	-123, -91, -94, -94, -94, -94, -132, -177, -176, 53,
	134, 66, -174, 56, 55, -159, 130, 28, 129, -68,
	-152, -152, 56, 56, -193, 55, 82, -94, -54, -86,
	14, 16, -194, -194, -194, -194, -33, 92, 262, -194,
	59, -194, -194, 9, -75, -2, 112, 56, -194, -194,
	-194, -58, -176, 57, -166, 82, 59, 141, -123, -148,
	66, 28, 28, -179, -180, 152, -182, -172, 56, -39,
	-74, -194, 260, 49, 263, -98, -194, -123, 60, -54,
	59, -194, 55, -123, -186, 39, 261, 264, 54, -180,
	34, -184, 39, -94, 154, 262, 56, 155, 263, -189,
	-190, 52, -193, 264, -190, 52, 10, 9, -65, 151,
	-188, 142, 137, 140, 30, -188, -194, -194, 136, 29,
	68,
}

var yyDef = [...]int16{
	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 560, 0, 317, 317, 317, 317, 317, 317,
	0, 631, 614, 0, 0, 0, 0, -2, 304, 305,
	0, 307, 308, 932, 932, 932, 932, 932, 0, 0,
	932, 0, 35, 36, 930, 1, 3, 568, 0, 0,
	321, 324, 319, 0, 614, 614, 0, 0, 65, 66,
	0, 0, 0, 919, 0, 612, 612, 612, 632, 633,
	636, 637, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	0, 0, 0, 615, 0, 610, 0, 610, 610, 610,
	0, 256, 389, 640, 641, 919, 0, 0, 0, 933,
	0, 933, 268, 933, 933, 271, 933, 0, 933, 0,
	278, 0, 0, 284, 933, 301, 302, 289, 303, 306,
	309, 310, 311, 312, 313, 932, 932, 316, 29, 572,
	0, 0, 560, 31, 0, 317, 322, 323, 327, 325,
	326, 318, 0, 335, 339, 0, 398, 0, 403, 405,
	-2, -2, 0, 440, 441, 442, 443, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 468, 469, 470, 471,
	545, 546, 547, 548, 549, 550, 551, 552, 407, 408,
	542, 592, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 533, 0, 504, 504, 504, 504, 504, 504, 504,
	504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 389, 50, 0, 908, 596, -2,
	-2, 0, 0, 638, 639, -2, 774, -2, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 0, 0, 84, 0, 82,
	0, 933, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 257, 933, 933, 260, 934, 935, 933,
	933, 933, 0, 933, 933, 267, 269, 270, 272, 933,
	933, 274, 0, 292, 290, 291, 286, 287, 0, 298,
	281, 282, 285, 314, 315, 30, 931, 24, 0, 0,
	569, 0, 561, 562, 565, 568, 29, 324, 0, 329,
	328, 320, 0, 336, 0, 0, 0, 340, 0, 342,
	343, 0, 401, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 426, 427, 428, 429, 430, 431, 404,
	0, 418, 0, 0, 0, 460, 461, 462, 463, 464,
	465, 466, 0, 331, 29, 0, 438, 0, 0, 0,
	0, 0, 0, 0, 0, 327, 0, 534, 0, 488,
	496, 0, 489, 497, 490, 498, 491, 0, 492, 499,
	493, 500, 494, 495, 501, 0, 0, 0, 331, 0,
	0, 48, 0, 388, 0, 346, 348, 349, 350, -2,
	0, 372, -2, 0, 0, 0, 42, 43, 0, 0,
	0, 0, 51, 908, 53, 54, 0, 0, 0, 162,
	605, 606, 607, 603, 206, 0, 0, 150, 146, 90,
	91, 92, 139, 94, 139, 139, 139, 139, 159, 159,
	159, 159, 122, 123, 124, 125, 126, 0, 0, 109,
	139, 139, 139, 113, 129, 130, 131, 132, 133, 134,
	135, 136, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 141, 141, 141, 143, 143, 634, 68, 0, 933,
	0, 933, 80, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 611, 0, 933, 253, 254, 390,
	642, 643, 258, 259, 261, 262, 263, 264, 265, 266,
	273, 277, 0, 295, 0, 0, 279, 280, 0, 0,
	573, 0, 0, 0, 0, 0, 564, 566, 567, 572,
	32, 327, 0, 553, 0, 0, 0, 330, 27, 399,
	400, 402, 419, 0, 421, 423, 341, 337, 0, 543,
	-2, 409, 410, 434, 435, 436, 0, 0, 0, 0,
	432, 414, 0, 445, 446, 447, 448, 449, 450, 451,
	452, 453, 454, 455, 456, 459, 518, 519, 0, 457,
	458, 467, 0, 0, 332, 333, 437, 0, 591, 29,
	0, 0, 0, 0, 442, 545, 0, 442, 545, 0,
	0, 0, 540, 537, 0, 0, 542, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 387, 0,
	0, 0, 0, 0, 0, 377, 0, 0, 380, 0,
	0, 0, 0, 371, 0, 0, 392, 853, 373, 0,
	375, 376, 396, 0, 396, 45, 396, 47, 0, 391,
	597, 52, 0, 0, 57, 58, 598, 599, 600, 601,
	0, 81, 207, 209, 212, 213, 214, 85, 86, 87,
	0, 0, 194, 0, 0, 188, 188, 0, 186, 187,
	83, 153, 151, 0, 148, 147, 93, 0, 159, 159,
	116, 117, 162, 0, 162, 162, 162, 0, 0, 110,
	111, 112, 104, 0, 105, 106, 107, 0, 108, 0,
	0, 933, 70, 613, 71, 932, 0, 0, 626, 221,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	0, 72, 223, 225, 224, 228, 0, 0, 0, 248,
	933, 252, 292, 276, 0, 0, 293, 294, 299, 283,
	0, 570, 571, 0, 563, 25, 0, 608, 609, 554,
	555, 344, 420, 422, 424, 0, 331, 411, 432, 415,
	0, 412, 0, 0, 406, 472, 0, 0, 439, -2,
	475, 476, 0, 0, 0, 0, 0, 511, 0, 0,
	512, 0, 560, 0, 538, 0, 0, 487, 0, 506,
	0, 0, 507, 508, 509, 510, 585, 0, 0, -2,
	0, 0, 396, 593, 0, 347, 366, 368, 0, 363,
	378, 379, 381, 0, 383, 0, 385, 386, 351, 353,
	354, 0, 0, 0, 0, 374, 560, 0, 396, 40,
	41, 0, 55, 56, 0, 0, 62, 163, 164, 0,
	210, 0, 0, 0, 181, 188, 188, 184, 189, 185,
	0, 155, 0, 152, 89, 149, 0, 162, 162, 118,
	0, 119, 120, 121, 0, 137, 0, 0, 0, 0,
	635, 69, 215, 932, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 932, 0, 932, 627,
	628, 629, 630, 0, 75, 0, 0, 0, 0, 0,
	251, 295, 296, 297, 574, 0, 26, 396, 0, 338,
	544, 0, 413, 0, 433, 416, 473, 334, 0, 139,
	139, 523, 139, 143, 526, 139, 528, 139, 531, 0,
	0, 0, 0, 0, 0, 0, 568, 486, 541, 0,
	543, 0, 0, 33, 0, 585, 575, 587, 589, 0,
	29, 0, 581, 0, 358, 560, 0, 0, 360, 367,
	0, 0, 361, 0, 362, 382, 384, 0, 0, 0,
	0, 568, 397, 39, 59, 60, 61, 208, 211, 0,
	190, 139, 193, 182, 183, 0, 157, 0, 154, 140,
	114, 115, 160, 161, 159, 0, 159, 0, 144, 0,
	933, 216, 217, 218, 219, 0, 222, 0, 73, 74,
	0, 0, 227, 249, 275, 556, 345, 474, 417, 477,
	520, 159, 524, 525, 527, 529, 530, 532, 479, 478,
	0, 0, 0, 0, 0, 535, 539, 0, 0, 0,
	34, 0, 590, -2, 0, 0, 0, 49, 0, 568,
	594, 595, 364, 0, 369, 0, 0, 0, 372, 38,
	173, 0, 192, 0, 356, 165, 158, 0, 162, 138,
	162, 0, 0, 67, 0, 76, 77, 0, 0, 0,
	558, 0, 521, 522, 0, 0, 0, 0, 513, 0,
	0, 0, 0, 0, 588, 0, -2, 0, 583, 582,
	359, 37, 0, 0, 0, 0, 392, 172, 174, 0,
	179, 0, 191, 0, 0, 170, 0, 167, 169, 156,
	127, 128, 142, 145, 0, 0, 0, 0, 229, 28,
	0, 0, 480, 482, 481, 483, 0, 0, 0, 485,
	536, 502, 503, 0, 578, 29, 0, 365, 393, 394,
	395, 355, 175, 176, 0, 180, 178, 0, 357, 88,
	0, 166, 168, 0, 243, 0, 78, 79, 72, 559,
	557, 484, 0, 0, 0, 586, -2, 584, 177, 0,
	171, 242, 0, 0, 75, 514, 0, 517, 0, 244,
	0, 226, 515, 0, 0, 0, 195, 0, 0, 196,
	197, 0, 0, 516, 198, 0, 0, 0, 0, 0,
	199, 201, 202, 0, 0, 200, 245, 246, 203, 204,
	205,
}

var yyTok1 = [...]int16{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 102, 94, 3,
	54, 56, 99, 97, 55, 98, 112, 100, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 347,
	83, 82, 84, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 93, 3, 105,
}

var yyTok2 = [...]int16{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	76, 77, 78, 79, 80, 81, 85, 86, 87, 88,
	89, 90, 91, 92, 95, 96, 101, 103, 106, 107,
	108, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]uint16{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:323
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:328
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:329
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:333
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:355
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:425
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:437
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:441
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:447
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:470
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:471
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:475
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:479
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:489
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:494
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:498
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:546
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:550
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:554
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:558
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:564
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:574
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:579
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:585
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:590
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:598
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:607
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:622
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:638
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:644
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:650
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:657
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:664
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:668
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:674
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:679
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:683
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:687
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:693
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:715
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:720
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:726
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:730
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:746
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:750
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:754
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:776
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:788
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:800
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:838
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:842
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:920
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:925
		{
			yyVAL.sqlVal = nil
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:934
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:938
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:946
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:950
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:956
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:964
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:977
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:983
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:991
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.optVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1000
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1009
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1014
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1018
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1023
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1027
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1040
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1053
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1057
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1061
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1065
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.sqlVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1074
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1080
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1084
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1090
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1094
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1100
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1115
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1125
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1137
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1156
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1166
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1170
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1176
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1182
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1186
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1193
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1205
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1211
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1217
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1223
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1231
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1244
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1248
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1252
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1260
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1282
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1296
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1300
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1305
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1314
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1318
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1330
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1348
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1361
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1371
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1375
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1402
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1408
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1418
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1434
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1446
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1454
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1459
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1467
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1471
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1477
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1481
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1562
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1567
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1585
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1591
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1638
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1642
		{
			yyVAL.str = "full "
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1652
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1658
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1662
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1666
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1672
		{
			yyVAL.showFilter = nil
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1676
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1680
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1686
		{
			yyVAL.showFilter = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1690
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1696
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1700
		{
			yyVAL.str = SessionStr
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1704
		{
			yyVAL.str = GlobalStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1720
		{
			yyVAL.statement = &Begin{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1724
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Commit{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1736
		{
			yyVAL.statement = &Rollback{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1742
		{
			yyVAL.statement = &OtherRead{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1746
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1766
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1772
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1776
		{
			setAllowComments(yylex, true)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1780
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1786
		{
			yyVAL.bytes2 = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1790
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1796
		{
			yyVAL.str = UnionStr
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1800
		{
			yyVAL.str = UnionAllStr
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1804
		{
			yyVAL.str = UnionDistinctStr
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = SQLCacheStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = DistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = StraightJoinHint
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1840
		{
			yyVAL.selectExprs = nil
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1850
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1854
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1860
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1864
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1868
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1872
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1877
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1892
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1897
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1901
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1911
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1925
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1929
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1941
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1945
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1951
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1961
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1965
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1978
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1982
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1986
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1996
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1998
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2002
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2004
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2008
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2010
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2013
		{
			yyVAL.empty = struct{}{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.empty = struct{}{}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2018
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2022
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2026
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2033
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2039
		{
			yyVAL.str = JoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2043
		{
			yyVAL.str = JoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2047
		{
			yyVAL.str = JoinStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2053
		{
			yyVAL.str = StraightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = LeftJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = LeftJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = RightJoinStr
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2071
		{
			yyVAL.str = RightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2077
		{
			yyVAL.str = NaturalJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2081
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2091
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2101
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2105
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2111
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2116
		{
			yyVAL.indexHints = nil
		}
	case 393:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2120
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2124
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2128
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2133
		{
			yyVAL.expr = nil
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2137
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2143
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2147
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2151
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2155
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2159
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2163
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2167
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2173
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2177
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2187
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2201
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2205
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 413:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2209
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2213
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2217
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2221
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2225
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.str = IsNullStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2239
		{
			yyVAL.str = IsNotNullStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.str = IsTrueStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2247
		{
			yyVAL.str = IsNotTrueStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.str = IsFalseStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2255
		{
			yyVAL.str = IsNotFalseStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2261
		{
			yyVAL.str = EqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.str = LessThanStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2269
		{
			yyVAL.str = GreaterThanStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2273
		{
			yyVAL.str = LessEqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.str = GreaterEqualStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2281
		{
			yyVAL.str = NotEqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2300
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2304
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2308
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2314
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2324
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2422
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2430
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2444
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2448
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2452
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2478
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2488
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2504
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2512
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 482:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2516
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2520
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2524
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2528
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Limit: yyDollar[6].limit, Separator: yyDollar[7].str}
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2532
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2536
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2626
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2662
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.str = BooleanModeStr
		}
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2670
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2674
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.str = QueryExpansionStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2694
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2720
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2724
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2728
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2732
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2749
		{
			yyVAL.expr = nil
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2753
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2758
		{
			yyVAL.str = string("")
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2768
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2772
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2778
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2783
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2787
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2801
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2811
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2819
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2823
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2831
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = &NullVal{}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2841
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2850
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2859
		{
			yyVAL.exprs = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2863
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2877
		{
			yyVAL.orderBy = nil
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2881
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2891
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2897
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2902
		{
			yyVAL.str = AscScr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.str = AscScr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.str = DescScr
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2915
		{
			yyVAL.limit = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2919
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2923
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2927
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2932
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.str = ForUpdateStr
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2940
		{
			yyVAL.str = ShareModeStr
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2953
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2957
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2961
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2966
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2970
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2974
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2981
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2985
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2989
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2993
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2998
		{
			yyVAL.updateExprs = nil
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3002
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3008
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3012
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3018
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3022
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3028
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3048
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3078
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3082
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3089
		{
			yyVAL.bytes = []byte("charset")
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3096
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3100
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.expr = &Default{}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3113
		{
			yyVAL.byt = 0
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3115
		{
			yyVAL.byt = 1
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3123
		{
			yyVAL.str = ""
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.str = IgnoreStr
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3150
		{
			yyVAL.empty = struct{}{}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			yyVAL.empty = struct{}{}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.empty = struct{}{}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3158
		{
			yyVAL.empty = struct{}{}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3160
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3163
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3165
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.empty = struct{}{}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3170
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3172
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3176
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3525
		{
			decNesting(yylex)
		}
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3530
		{
			skipToEnd(yylex)
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3535
		{
			skipToEnd(yylex)
		}
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			skipToEnd(yylex)
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
