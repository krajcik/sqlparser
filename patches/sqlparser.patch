Only in /home/gleez/workspace/app/manticore/sqlparser//: .git
Only in /home/gleez/workspace/app/manticore/sqlparser//: .gitignore
Only in /home/gleez/workspace/app/manticore/sqlparser//: .travis.yml
Only in /home/gleez/workspace/app/manticore/sqlparser//: CONTRIBUTORS.md
Only in /home/gleez/workspace/app/manticore/sqlparser//: LICENSE.md
Only in /home/gleez/workspace/app/manticore/sqlparser//: README.md
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/analyzer.go
+++ /home/gleez/workspace/app/manticore/sqlparser//analyzer.go
@@ -19,15 +19,13 @@
 // analyzer.go contains utility analysis functions.
 
 import (
+	"errors"
 	"fmt"
 	"strconv"
 	"strings"
 	"unicode"
 
-	"vitess.io/vitess/go/sqltypes"
-	"vitess.io/vitess/go/vt/vterrors"
-
-	vtrpcpb "vitess.io/vitess/go/vt/proto/vtrpc"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 // StatementType encodes the type of a SQL statement
@@ -265,7 +263,7 @@
 				return sqltypes.PlanValue{}, err
 			}
 			if innerpv.ListKey != "" || innerpv.Values != nil {
-				return sqltypes.PlanValue{}, vterrors.New(vtrpcpb.Code_UNIMPLEMENTED, "unsupported: nested lists")
+				return sqltypes.PlanValue{}, errors.New("unsupported: nested lists")
 			}
 			pv.Values = append(pv.Values, innerpv)
 		}
@@ -273,7 +271,7 @@
 	case *NullVal:
 		return sqltypes.PlanValue{}, nil
 	}
-	return sqltypes.PlanValue{}, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "expression is too complex '%v'", String(node))
+	return sqltypes.PlanValue{}, fmt.Errorf("expression is too complex '%v'", String(node))
 }
 
 // SetKey is the extracted key from one SetExpr
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/analyzer_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//analyzer_test.go
@@ -21,8 +21,8 @@
 	"strings"
 	"testing"
 
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 	"github.com/stretchr/testify/assert"
-	"vitess.io/vitess/go/sqltypes"
 )
 
 func TestPreview(t *testing.T) {
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/ast.go
+++ /home/gleez/workspace/app/manticore/sqlparser//ast.go
@@ -22,15 +22,12 @@
 	"errors"
 	"fmt"
 	"io"
+	"log"
 	"strings"
 	"sync"
 
-	"vitess.io/vitess/go/sqltypes"
-	"vitess.io/vitess/go/vt/log"
-	"vitess.io/vitess/go/vt/vterrors"
-
-	querypb "vitess.io/vitess/go/vt/proto/query"
-	vtrpcpb "vitess.io/vitess/go/vt/proto/vtrpc"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 // parserPool is a pool for parser objects.
@@ -91,11 +88,11 @@
 			if typ, val := tokenizer.Scan(); typ != 0 {
 				return nil, fmt.Errorf("extra characters encountered after end of DDL: '%s'", string(val))
 			}
-			log.Warningf("ignoring error parsing DDL '%s': %v", sql, tokenizer.LastError)
+			log.Printf("ignoring error parsing DDL '%s': %v", sql, tokenizer.LastError)
 			tokenizer.ParseTree = tokenizer.partialDDL
 			return tokenizer.ParseTree, nil
 		}
-		return nil, vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, tokenizer.LastError.Error())
+		return nil, errors.New(tokenizer.LastError.Error())
 	}
 	if tokenizer.ParseTree == nil {
 		return nil, ErrEmpty
@@ -2550,7 +2547,7 @@
 		return NewStrVal(value.ToBytes()), nil
 	default:
 		// We cannot support sqltypes.Expression, or any other invalid type.
-		return nil, vterrors.Errorf(vtrpcpb.Code_INTERNAL, "cannot convert value %v to AST", value)
+		return nil, fmt.Errorf("cannot convert value %v to AST", value)
 	}
 }
 
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/ast_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//ast_test.go
@@ -24,7 +24,7 @@
 	"testing"
 	"unsafe"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 func TestAppend(t *testing.T) {
Only in /home/gleez/workspace/app/manticore/sqlparser//: dependency
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/encodable.go
+++ /home/gleez/workspace/app/manticore/sqlparser//encodable.go
@@ -19,7 +19,7 @@
 import (
 	"strings"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 // This file contains types that are 'Encodable'.
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/encodable_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//encodable_test.go
@@ -20,7 +20,7 @@
 	"strings"
 	"testing"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 func TestEncodable(t *testing.T) {
Only in /home/gleez/workspace/app/manticore/sqlparser//: github_test.go
Only in /home/gleez/workspace/app/manticore/sqlparser//: go.mod
Only in /home/gleez/workspace/app/manticore/sqlparser//: go.sum
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/normalizer.go
+++ /home/gleez/workspace/app/manticore/sqlparser//normalizer.go
@@ -19,9 +19,9 @@
 import (
 	"fmt"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 // Normalize changes the statement to use bind values, and
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/normalizer_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//normalizer_test.go
@@ -21,8 +21,8 @@
 	"reflect"
 	"testing"
 
-	"vitess.io/vitess/go/sqltypes"
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 func TestNormalize(t *testing.T) {
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/parse_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//parse_test.go
@@ -17,11 +17,11 @@
 package sqlparser
 
 import (
-	"bufio"
+	// "bufio"
 	"bytes"
 	"fmt"
 	"math/rand"
-	"os"
+	// "os"
 	"strings"
 	"sync"
 	"testing"
@@ -2544,24 +2544,24 @@
 	}
 }
 
-func TestParseDjangoQueries(t *testing.T) {
+// func TestParseDjangoQueries(t *testing.T) {
 
-	file, err := os.Open("./test_queries/django_queries.txt")
-	defer file.Close()
-	if err != nil {
-		t.Errorf(" Error: %v", err)
-	}
-	scanner := bufio.NewScanner(file)
+// 	file, err := os.Open("./test_queries/django_queries.txt")
+// 	defer file.Close()
+// 	if err != nil {
+// 		t.Errorf(" Error: %v", err)
+// 	}
+// 	scanner := bufio.NewScanner(file)
 
-	for scanner.Scan() {
+// 	for scanner.Scan() {
 
-		_, err := Parse(string(scanner.Text()))
-		if err != nil {
-			t.Error(scanner.Text())
-			t.Errorf(" Error: %v", err)
-		}
-	}
-}
+// 		_, err := Parse(string(scanner.Text()))
+// 		if err != nil {
+// 			t.Error(scanner.Text())
+// 			t.Errorf(" Error: %v", err)
+// 		}
+// 	}
+// }
 
 // Benchmark run on 6/23/17, prior to improvements:
 // BenchmarkParse1-4         100000             16334 ns/op
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/parsed_query.go
+++ /home/gleez/workspace/app/manticore/sqlparser//parsed_query.go
@@ -21,9 +21,9 @@
 	"fmt"
 	"strings"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 // ParsedQuery represents a parsed query where
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/parsed_query_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//parsed_query_test.go
@@ -20,9 +20,9 @@
 	"reflect"
 	"testing"
 
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 func TestNewParsedQuery(t *testing.T) {
Only in /home/gleez/workspace/app/manticore/sqlparser//: patches
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/redact_query.go
+++ /home/gleez/workspace/app/manticore/sqlparser//redact_query.go
@@ -16,7 +16,7 @@
 
 package sqlparser
 
-import querypb "vitess.io/vitess/go/vt/proto/query"
+import "github.com/sandeepone/sqlparser/dependency/querypb"
 
 // RedactSQLQuery returns a sql string with the params stripped out for display
 func RedactSQLQuery(sql string) (string, error) {
Only in /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/: test_queries
--- /home/gleez/workspace/src/vitess.io/vitess/go//vt/sqlparser/token.go
+++ /home/gleez/workspace/app/manticore/sqlparser//token.go
@@ -22,8 +22,8 @@
 	"fmt"
 	"io"
 
-	"vitess.io/vitess/go/bytes2"
-	"vitess.io/vitess/go/sqltypes"
+	"github.com/sandeepone/sqlparser/dependency/bytes2"
+	"github.com/sandeepone/sqlparser/dependency/sqltypes"
 )
 
 const (
