Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: arithmetic.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: arithmetic_test.go
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/bind_variables.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/bind_variables.go
@@ -20,11 +20,10 @@
 	"bytes"
 	"errors"
 	"fmt"
+	"reflect"
 	"strconv"
 
-	"github.com/golang/protobuf/proto"
-
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 // NullBindVariable is a bindvar with NULL value.
@@ -264,9 +263,9 @@
 }
 
 // BindVariablesEqual compares two maps of bind variables.
-// For protobuf messages we have to use "proto.Equal".
+// For protobuf messages we have to use "reflect.DeepEqual".
 func BindVariablesEqual(x, y map[string]*querypb.BindVariable) bool {
-	return proto.Equal(&querypb.BoundQuery{BindVariables: x}, &querypb.BoundQuery{BindVariables: y})
+	return reflect.DeepEqual(&querypb.BoundQuery{BindVariables: x}, &querypb.BoundQuery{BindVariables: y})
 }
 
 // CopyBindVariables returns a shallow-copy of the given bindVariables map.
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/bind_variables_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/bind_variables_test.go
@@ -21,16 +21,14 @@
 	"strings"
 	"testing"
 
-	"github.com/golang/protobuf/proto"
-
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 func TestProtoConversions(t *testing.T) {
 	v := TestValue(Int64, "1")
 	got := ValueToProto(v)
 	want := &querypb.Value{Type: Int64, Value: []byte("1")}
-	if !proto.Equal(got, want) {
+	if !reflect.DeepEqual(got, want) {
 		t.Errorf("ValueToProto: %v, want %v", got, want)
 	}
 	gotback := ProtoToValue(got)
@@ -252,7 +250,7 @@
 			t.Errorf("ToBindVar(%T(%v)) error: nil, want %s", tcase.in, tcase.in, tcase.err)
 			continue
 		}
-		if !proto.Equal(bv, tcase.out) {
+		if !reflect.DeepEqual(bv, tcase.out) {
 			t.Errorf("ToBindVar(%T(%v)): %v, want %s", tcase.in, tcase.in, bv, tcase.out)
 		}
 	}
@@ -566,83 +564,83 @@
 	}
 }
 
-func TestBindVariablesFormat(t *testing.T) {
-	tupleBindVar, err := BuildBindVariable([]int64{1, 2})
-	if err != nil {
-		t.Fatalf("failed to create a tuple bind var: %v", err)
-	}
+// func TestBindVariablesFormat(t *testing.T) {
+// 	tupleBindVar, err := BuildBindVariable([]int64{1, 2})
+// 	if err != nil {
+// 		t.Fatalf("failed to create a tuple bind var: %v", err)
+// 	}
 
-	bindVariables := map[string]*querypb.BindVariable{
-		"key_1": StringBindVariable("val_1"),
-		"key_2": Int64BindVariable(789),
-		"key_3": BytesBindVariable([]byte("val_3")),
-		"key_4": tupleBindVar,
-	}
+// 	bindVariables := map[string]*querypb.BindVariable{
+// 		"key_1": StringBindVariable("val_1"),
+// 		"key_2": Int64BindVariable(789),
+// 		"key_3": BytesBindVariable([]byte("val_3")),
+// 		"key_4": tupleBindVar,
+// 	}
 
-	formattedStr := FormatBindVariables(bindVariables, true /* full */, false /* asJSON */)
-	if !strings.Contains(formattedStr, "key_1") ||
-		!strings.Contains(formattedStr, "val_1") {
-		t.Fatalf("bind variable 'key_1': 'val_1' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_2") ||
-		!strings.Contains(formattedStr, "789") {
-		t.Fatalf("bind variable 'key_2': '789' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_3") || !strings.Contains(formattedStr, "val_3") {
-		t.Fatalf("bind variable 'key_3': 'val_3' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_4") ||
-		!strings.Contains(formattedStr, "values:<type:INT64 value:\"1\" > values:<type:INT64 value:\"2\" >") {
-		t.Fatalf("bind variable 'key_4': (1, 2) is not formatted")
-	}
+// 	formattedStr := FormatBindVariables(bindVariables, true /* full */, false /* asJSON */)
+// 	if !strings.Contains(formattedStr, "key_1") ||
+// 		!strings.Contains(formattedStr, "val_1") {
+// 		t.Fatalf("bind variable 'key_1': 'val_1' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_2") ||
+// 		!strings.Contains(formattedStr, "789") {
+// 		t.Fatalf("bind variable 'key_2': '789' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_3") || !strings.Contains(formattedStr, "val_3") {
+// 		t.Fatalf("bind variable 'key_3': 'val_3' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_4") ||
+// 		!strings.Contains(formattedStr, "values:<type:INT64 value:\"1\" > values:<type:INT64 value:\"2\" >") {
+// 		t.Fatalf("bind variable 'key_4': (1, 2) is not formatted")
+// 	}
 
-	formattedStr = FormatBindVariables(bindVariables, false /* full */, false /* asJSON */)
-	if !strings.Contains(formattedStr, "key_1") {
-		t.Fatalf("bind variable 'key_1' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_2") ||
-		!strings.Contains(formattedStr, "789") {
-		t.Fatalf("bind variable 'key_2': '789' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_3") || !strings.Contains(formattedStr, "5 bytes") {
-		t.Fatalf("bind variable 'key_3' is not formatted")
-	}
-	if !strings.Contains(formattedStr, "key_4") || !strings.Contains(formattedStr, "2 items") {
-		t.Fatalf("bind variable 'key_4' is not formatted")
-	}
+// 	formattedStr = FormatBindVariables(bindVariables, false /* full */, false /* asJSON */)
+// 	if !strings.Contains(formattedStr, "key_1") {
+// 		t.Fatalf("bind variable 'key_1' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_2") ||
+// 		!strings.Contains(formattedStr, "789") {
+// 		t.Fatalf("bind variable 'key_2': '789' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_3") || !strings.Contains(formattedStr, "5 bytes") {
+// 		t.Fatalf("bind variable 'key_3' is not formatted")
+// 	}
+// 	if !strings.Contains(formattedStr, "key_4") || !strings.Contains(formattedStr, "2 items") {
+// 		t.Fatalf("bind variable 'key_4' is not formatted")
+// 	}
 
-	formattedStr = FormatBindVariables(bindVariables, true /* full */, true /* asJSON */)
-	t.Logf("%q", formattedStr)
-	if !strings.Contains(formattedStr, "\"key_1\": {\"type\": \"VARCHAR\", \"value\": \"val_1\"}") {
-		t.Fatalf("bind variable 'key_1' is not formatted")
-	}
+// 	formattedStr = FormatBindVariables(bindVariables, true /* full */, true /* asJSON */)
+// 	t.Logf("%q", formattedStr)
+// 	if !strings.Contains(formattedStr, "\"key_1\": {\"type\": \"VARCHAR\", \"value\": \"val_1\"}") {
+// 		t.Fatalf("bind variable 'key_1' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_2\": {\"type\": \"INT64\", \"value\": 789}") {
-		t.Fatalf("bind variable 'key_2' is not formatted")
-	}
+// 	if !strings.Contains(formattedStr, "\"key_2\": {\"type\": \"INT64\", \"value\": 789}") {
+// 		t.Fatalf("bind variable 'key_2' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_3\": {\"type\": \"VARBINARY\", \"value\": \"val_3\"}") {
-		t.Fatalf("bind variable 'key_3' is not formatted")
-	}
+// 	if !strings.Contains(formattedStr, "\"key_3\": {\"type\": \"VARBINARY\", \"value\": \"val_3\"}") {
+// 		t.Fatalf("bind variable 'key_3' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_4\": {\"type\": \"TUPLE\", \"value\": \"\"}") {
-		t.Fatalf("bind variable 'key_4' is not formatted")
-	}
+// 	if !strings.Contains(formattedStr, "\"key_4\": {\"type\": \"TUPLE\", \"value\": \"\"}") {
+// 		t.Fatalf("bind variable 'key_4' is not formatted")
+// 	}
 
-	formattedStr = FormatBindVariables(bindVariables, false /* full */, true /* asJSON */)
-	if !strings.Contains(formattedStr, "\"key_1\": {\"type\": \"VARCHAR\", \"value\": \"5 bytes\"}") {
-		t.Fatalf("bind variable 'key_1' is not formatted")
-	}
+// 	formattedStr = FormatBindVariables(bindVariables, false /* full */, true /* asJSON */)
+// 	if !strings.Contains(formattedStr, "\"key_1\": {\"type\": \"VARCHAR\", \"value\": \"5 bytes\"}") {
+// 		t.Fatalf("bind variable 'key_1' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_2\": {\"type\": \"INT64\", \"value\": 789}") {
-		t.Fatalf("bind variable 'key_2' is not formatted")
-	}
+// 	if !strings.Contains(formattedStr, "\"key_2\": {\"type\": \"INT64\", \"value\": 789}") {
+// 		t.Fatalf("bind variable 'key_2' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_3\": {\"type\": \"VARCHAR\", \"value\": \"5 bytes\"}") {
-		t.Fatalf("bind variable 'key_3' is not formatted")
-	}
+// 	if !strings.Contains(formattedStr, "\"key_3\": {\"type\": \"VARCHAR\", \"value\": \"5 bytes\"}") {
+// 		t.Fatalf("bind variable 'key_3' is not formatted")
+// 	}
 
-	if !strings.Contains(formattedStr, "\"key_4\": {\"type\": \"VARCHAR\", \"value\": \"2 items\"}") {
-		t.Fatalf("bind variable 'key_4' is not formatted")
-	}
-}
+// 	if !strings.Contains(formattedStr, "\"key_4\": {\"type\": \"VARCHAR\", \"value\": \"2 items\"}") {
+// 		t.Fatalf("bind variable 'key_4' is not formatted")
+// 	}
+// }
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: event_token.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: event_token_test.go
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/plan_value.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/plan_value.go
@@ -18,10 +18,10 @@
 
 import (
 	"encoding/json"
+	"errors"
+	"fmt"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
-	vtrpcpb "vitess.io/vitess/go/vt/proto/vtrpc"
-	"vitess.io/vitess/go/vt/vterrors"
+	querypb "github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 // PlanValue represents a value or a list of values for
@@ -87,7 +87,7 @@
 	case pv.ListKey != "" || pv.Values != nil:
 		// This code is unreachable because the parser does not allow
 		// multi-value constructs where a single value is expected.
-		return NULL, vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "a list was supplied where a single value was expected")
+		return NULL, errors.New("a list was supplied where a single value was expected")
 	}
 	return NULL, nil
 }
@@ -95,10 +95,10 @@
 func (pv PlanValue) lookupValue(bindVars map[string]*querypb.BindVariable) (*querypb.BindVariable, error) {
 	bv, ok := bindVars[pv.Key]
 	if !ok {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "missing bind var %s", pv.Key)
+		return nil, fmt.Errorf("missing bind var %s", pv.Key)
 	}
 	if bv.Type == querypb.Type_TUPLE {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "TUPLE was supplied for single value bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("TUPLE was supplied for single value bind var %s", pv.ListKey)
 	}
 	return bv, nil
 }
@@ -129,16 +129,16 @@
 	}
 	// This code is unreachable because the parser does not allow
 	// single value constructs where multiple values are expected.
-	return nil, vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "a single value was supplied where a list was expected")
+	return nil, errors.New("a single value was supplied where a list was expected")
 }
 
 func (pv PlanValue) lookupList(bindVars map[string]*querypb.BindVariable) (*querypb.BindVariable, error) {
 	bv, ok := bindVars[pv.ListKey]
 	if !ok {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "missing bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("missing bind var %s", pv.ListKey)
 	}
 	if bv.Type != querypb.Type_TUPLE {
-		return nil, vterrors.Errorf(vtrpcpb.Code_INVALID_ARGUMENT, "single value was supplied for TUPLE bind var %s", pv.ListKey)
+		return nil, fmt.Errorf("single value was supplied for TUPLE bind var %s", pv.ListKey)
 	}
 	return bv, nil
 }
@@ -171,7 +171,7 @@
 		case l:
 			return nil
 		default:
-			return vterrors.New(vtrpcpb.Code_INVALID_ARGUMENT, "mismatch in number of column values")
+			return errors.New("mismatch in number of column values")
 		}
 	}
 
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/plan_value_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/plan_value_test.go
@@ -21,7 +21,7 @@
 	"strings"
 	"testing"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 func TestPlanValueIsNull(t *testing.T) {
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: proto3.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: proto3_test.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: query_response.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: result.go
Only in /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/: result_test.go
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/testing.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/testing.go
@@ -17,99 +17,95 @@
 package sqltypes
 
 import (
-	"bytes"
-	"fmt"
-	"strings"
-
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
-// Functions in this file should only be used for testing.
-// This is an experiment to see if test code bloat can be
-// reduced and readability improved.
+// // Functions in this file should only be used for testing.
+// // This is an experiment to see if test code bloat can be
+// // reduced and readability improved.
 
-// MakeTestFields builds a []*querypb.Field for testing.
-//   fields := sqltypes.MakeTestFields(
-//     "a|b",
-//     "int64|varchar",
-//   )
-// The field types are as defined in querypb and are case
-// insensitive. Column delimiters must be used only to sepearate
-// strings and not at the beginning or the end.
-func MakeTestFields(names, types string) []*querypb.Field {
-	n := split(names)
-	t := split(types)
-	var fields []*querypb.Field
-	for i := range n {
-		fields = append(fields, &querypb.Field{
-			Name: n[i],
-			Type: querypb.Type(querypb.Type_value[strings.ToUpper(t[i])]),
-		})
-	}
-	return fields
-}
+// // MakeTestFields builds a []*querypb.Field for testing.
+// //   fields := sqltypes.MakeTestFields(
+// //     "a|b",
+// //     "int64|varchar",
+// //   )
+// // The field types are as defined in querypb and are case
+// // insensitive. Column delimiters must be used only to sepearate
+// // strings and not at the beginning or the end.
+// func MakeTestFields(names, types string) []*querypb.Field {
+// 	n := split(names)
+// 	t := split(types)
+// 	var fields []*querypb.Field
+// 	for i := range n {
+// 		fields = append(fields, &querypb.Field{
+// 			Name: n[i],
+// 			Type: querypb.Type(querypb.Type_value[strings.ToUpper(t[i])]),
+// 		})
+// 	}
+// 	return fields
+// }
 
-// MakeTestResult builds a *sqltypes.Result object for testing.
-//   result := sqltypes.MakeTestResult(
-//     fields,
-//     " 1|a",
-//     "10|abcd",
-//   )
-// The field type values are set as the types for the rows built.
-// Spaces are trimmed from row values. "null" is treated as NULL.
-func MakeTestResult(fields []*querypb.Field, rows ...string) *Result {
-	result := &Result{
-		Fields: fields,
-	}
-	if len(rows) > 0 {
-		result.Rows = make([][]Value, len(rows))
-	}
-	for i, row := range rows {
-		result.Rows[i] = make([]Value, len(fields))
-		for j, col := range split(row) {
-			if col == "null" {
-				continue
-			}
-			result.Rows[i][j] = MakeTrusted(fields[j].Type, []byte(col))
-		}
-	}
-	result.RowsAffected = uint64(len(result.Rows))
-	return result
-}
+// // MakeTestResult builds a *sqltypes.Result object for testing.
+// //   result := sqltypes.MakeTestResult(
+// //     fields,
+// //     " 1|a",
+// //     "10|abcd",
+// //   )
+// // The field type values are set as the types for the rows built.
+// // Spaces are trimmed from row values. "null" is treated as NULL.
+// func MakeTestResult(fields []*querypb.Field, rows ...string) *Result {
+// 	result := &Result{
+// 		Fields: fields,
+// 	}
+// 	if len(rows) > 0 {
+// 		result.Rows = make([][]Value, len(rows))
+// 	}
+// 	for i, row := range rows {
+// 		result.Rows[i] = make([]Value, len(fields))
+// 		for j, col := range split(row) {
+// 			if col == "null" {
+// 				continue
+// 			}
+// 			result.Rows[i][j] = MakeTrusted(fields[j].Type, []byte(col))
+// 		}
+// 	}
+// 	result.RowsAffected = uint64(len(result.Rows))
+// 	return result
+// }
 
-// MakeTestStreamingResults builds a list of results for streaming.
-//   results := sqltypes.MakeStreamingResults(
-//     fields,
-//		 "1|a",
-//     "2|b",
-//     "---",
-//     "c|c",
-//   )
-// The first result contains only the fields. Subsequent results
-// are built using the field types. Every input that starts with a "-"
-// is treated as streaming delimiter for one result. A final
-// delimiter must not be supplied.
-func MakeTestStreamingResults(fields []*querypb.Field, rows ...string) []*Result {
-	var results []*Result
-	results = append(results, &Result{Fields: fields})
-	start := 0
-	cur := 0
-	// Add a final streaming delimiter to simplify the loop below.
-	rows = append(rows, "-")
-	for cur < len(rows) {
-		if rows[cur][0] != '-' {
-			cur++
-			continue
-		}
-		result := MakeTestResult(fields, rows[start:cur]...)
-		result.Fields = nil
-		result.RowsAffected = 0
-		results = append(results, result)
-		start = cur + 1
-		cur = start
-	}
-	return results
-}
+// // MakeTestStreamingResults builds a list of results for streaming.
+// //   results := sqltypes.MakeStreamingResults(
+// //     fields,
+// //		 "1|a",
+// //     "2|b",
+// //     "---",
+// //     "c|c",
+// //   )
+// // The first result contains only the fields. Subsequent results
+// // are built using the field types. Every input that starts with a "-"
+// // is treated as streaming delimiter for one result. A final
+// // delimiter must not be supplied.
+// func MakeTestStreamingResults(fields []*querypb.Field, rows ...string) []*Result {
+// 	var results []*Result
+// 	results = append(results, &Result{Fields: fields})
+// 	start := 0
+// 	cur := 0
+// 	// Add a final streaming delimiter to simplify the loop below.
+// 	rows = append(rows, "-")
+// 	for cur < len(rows) {
+// 		if rows[cur][0] != '-' {
+// 			cur++
+// 			continue
+// 		}
+// 		result := MakeTestResult(fields, rows[start:cur]...)
+// 		result.Fields = nil
+// 		result.RowsAffected = 0
+// 		results = append(results, result)
+// 		start = cur + 1
+// 		cur = start
+// 	}
+// 	return results
+// }
 
 // TestBindVariable makes a *querypb.BindVariable from
 // an interface{}.It panics on invalid input.
@@ -131,24 +127,24 @@
 	return MakeTrusted(typ, []byte(val))
 }
 
-// PrintResults prints []*Results into a string.
-// This function should only be used for testing.
-func PrintResults(results []*Result) string {
-	b := new(bytes.Buffer)
-	for i, r := range results {
-		if i == 0 {
-			fmt.Fprintf(b, "%v", r)
-			continue
-		}
-		fmt.Fprintf(b, ", %v", r)
-	}
-	return b.String()
-}
+// // PrintResults prints []*Results into a string.
+// // This function should only be used for testing.
+// func PrintResults(results []*Result) string {
+// 	b := new(bytes.Buffer)
+// 	for i, r := range results {
+// 		if i == 0 {
+// 			fmt.Fprintf(b, "%v", r)
+// 			continue
+// 		}
+// 		fmt.Fprintf(b, ", %v", r)
+// 	}
+// 	return b.String()
+// }
 
-func split(str string) []string {
-	splits := strings.Split(str, "|")
-	for i, v := range splits {
-		splits[i] = strings.TrimSpace(v)
-	}
-	return splits
-}
+// func split(str string) []string {
+// 	splits := strings.Split(str, "|")
+// 	for i, v := range splits {
+// 		splits[i] = strings.TrimSpace(v)
+// 	}
+// 	return splits
+// }
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/type.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/type.go
@@ -19,7 +19,7 @@
 import (
 	"fmt"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 // This file provides wrappers and support
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/type_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/type_test.go
@@ -19,7 +19,7 @@
 import (
 	"testing"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 func TestTypeValues(t *testing.T) {
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/value.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/value.go
@@ -23,10 +23,10 @@
 	"fmt"
 	"strconv"
 
-	"vitess.io/vitess/go/bytes2"
-	"vitess.io/vitess/go/hack"
+	"github.com/sandeepone/sqlparser/dependency/bytes2"
+	"github.com/sandeepone/sqlparser/dependency/hack"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 var (
--- /home/gleez/workspace/src/vitess.io/vitess/go//sqltypes/value_test.go
+++ /home/gleez/workspace/app/manticore/sqlparser//dependency/sqltypes/value_test.go
@@ -22,7 +22,7 @@
 	"strings"
 	"testing"
 
-	querypb "vitess.io/vitess/go/vt/proto/query"
+	"github.com/sandeepone/sqlparser/dependency/querypb"
 )
 
 const (
